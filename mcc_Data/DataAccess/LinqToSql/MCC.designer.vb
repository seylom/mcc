'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ASPNETDB")>  _
Partial Public Class MCCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertmcc_CategoriesAdvice(instance As mcc_CategoriesAdvice)
    End Sub
  Partial Private Sub Updatemcc_CategoriesAdvice(instance As mcc_CategoriesAdvice)
    End Sub
  Partial Private Sub Deletemcc_CategoriesAdvice(instance As mcc_CategoriesAdvice)
    End Sub
  Partial Private Sub Insertmcc_BadWord(instance As mcc_BadWord)
    End Sub
  Partial Private Sub Updatemcc_BadWord(instance As mcc_BadWord)
    End Sub
  Partial Private Sub Deletemcc_BadWord(instance As mcc_BadWord)
    End Sub
  Partial Private Sub Insertmcc_Word_Replace(instance As mcc_Word_Replace)
    End Sub
  Partial Private Sub Updatemcc_Word_Replace(instance As mcc_Word_Replace)
    End Sub
  Partial Private Sub Deletemcc_Word_Replace(instance As mcc_Word_Replace)
    End Sub
  Partial Private Sub Insertmcc_BannedIP(instance As mcc_BannedIP)
    End Sub
  Partial Private Sub Updatemcc_BannedIP(instance As mcc_BannedIP)
    End Sub
  Partial Private Sub Deletemcc_BannedIP(instance As mcc_BannedIP)
    End Sub
  Partial Private Sub Insertmcc_Registry(instance As mcc_Registry)
    End Sub
  Partial Private Sub Updatemcc_Registry(instance As mcc_Registry)
    End Sub
  Partial Private Sub Deletemcc_Registry(instance As mcc_Registry)
    End Sub
  Partial Private Sub Insertmcc_HomePage(instance As mcc_HomePage)
    End Sub
  Partial Private Sub Updatemcc_HomePage(instance As mcc_HomePage)
    End Sub
  Partial Private Sub Deletemcc_HomePage(instance As mcc_HomePage)
    End Sub
  Partial Private Sub Insertmcc_ArticleCategory(instance As mcc_ArticleCategory)
    End Sub
  Partial Private Sub Updatemcc_ArticleCategory(instance As mcc_ArticleCategory)
    End Sub
  Partial Private Sub Deletemcc_ArticleCategory(instance As mcc_ArticleCategory)
    End Sub
  Partial Private Sub Insertmcc_Status(instance As mcc_Status)
    End Sub
  Partial Private Sub Updatemcc_Status(instance As mcc_Status)
    End Sub
  Partial Private Sub Deletemcc_Status(instance As mcc_Status)
    End Sub
  Partial Private Sub Insertmcc_Feedback(instance As mcc_Feedback)
    End Sub
  Partial Private Sub Updatemcc_Feedback(instance As mcc_Feedback)
    End Sub
  Partial Private Sub Deletemcc_Feedback(instance As mcc_Feedback)
    End Sub
  Partial Private Sub Insertmcc_quote(instance As mcc_quote)
    End Sub
  Partial Private Sub Updatemcc_quote(instance As mcc_quote)
    End Sub
  Partial Private Sub Deletemcc_quote(instance As mcc_quote)
    End Sub
  Partial Private Sub Insertmcc_Comment(instance As mcc_Comment)
    End Sub
  Partial Private Sub Updatemcc_Comment(instance As mcc_Comment)
    End Sub
  Partial Private Sub Deletemcc_Comment(instance As mcc_Comment)
    End Sub
  Partial Private Sub Insertmcc_question(instance As mcc_question)
    End Sub
  Partial Private Sub Updatemcc_question(instance As mcc_question)
    End Sub
  Partial Private Sub Deletemcc_question(instance As mcc_question)
    End Sub
  Partial Private Sub Insertmcc_Contribution(instance As mcc_Contribution)
    End Sub
  Partial Private Sub Updatemcc_Contribution(instance As mcc_Contribution)
    End Sub
  Partial Private Sub Deletemcc_Contribution(instance As mcc_Contribution)
    End Sub
  Partial Private Sub Insertmcc_Category(instance As mcc_Category)
    End Sub
  Partial Private Sub Updatemcc_Category(instance As mcc_Category)
    End Sub
  Partial Private Sub Deletemcc_Category(instance As mcc_Category)
    End Sub
  Partial Private Sub Insertmcc_AdviceCategory(instance As mcc_AdviceCategory)
    End Sub
  Partial Private Sub Updatemcc_AdviceCategory(instance As mcc_AdviceCategory)
    End Sub
  Partial Private Sub Deletemcc_AdviceCategory(instance As mcc_AdviceCategory)
    End Sub
  Partial Private Sub Insertmcc_Ticket(instance As mcc_Ticket)
    End Sub
  Partial Private Sub Updatemcc_Ticket(instance As mcc_Ticket)
    End Sub
  Partial Private Sub Deletemcc_Ticket(instance As mcc_Ticket)
    End Sub
  Partial Private Sub Insertmcc_TicketChange(instance As mcc_TicketChange)
    End Sub
  Partial Private Sub Updatemcc_TicketChange(instance As mcc_TicketChange)
    End Sub
  Partial Private Sub Deletemcc_TicketChange(instance As mcc_TicketChange)
    End Sub
  Partial Private Sub Insertmcc_AdviceComment(instance As mcc_AdviceComment)
    End Sub
  Partial Private Sub Updatemcc_AdviceComment(instance As mcc_AdviceComment)
    End Sub
  Partial Private Sub Deletemcc_AdviceComment(instance As mcc_AdviceComment)
    End Sub
  Partial Private Sub Insertmcc_VideoCategory(instance As mcc_VideoCategory)
    End Sub
  Partial Private Sub Updatemcc_VideoCategory(instance As mcc_VideoCategory)
    End Sub
  Partial Private Sub Deletemcc_VideoCategory(instance As mcc_VideoCategory)
    End Sub
  Partial Private Sub Insertmcc_CategoriesVideo(instance As mcc_CategoriesVideo)
    End Sub
  Partial Private Sub Updatemcc_CategoriesVideo(instance As mcc_CategoriesVideo)
    End Sub
  Partial Private Sub Deletemcc_CategoriesVideo(instance As mcc_CategoriesVideo)
    End Sub
  Partial Private Sub Insertmcc_VideoComment(instance As mcc_VideoComment)
    End Sub
  Partial Private Sub Updatemcc_VideoComment(instance As mcc_VideoComment)
    End Sub
  Partial Private Sub Deletemcc_VideoComment(instance As mcc_VideoComment)
    End Sub
  Partial Private Sub Insertmcc_Poll(instance As mcc_Poll)
    End Sub
  Partial Private Sub Updatemcc_Poll(instance As mcc_Poll)
    End Sub
  Partial Private Sub Deletemcc_Poll(instance As mcc_Poll)
    End Sub
  Partial Private Sub Insertmcc_PollOption(instance As mcc_PollOption)
    End Sub
  Partial Private Sub Updatemcc_PollOption(instance As mcc_PollOption)
    End Sub
  Partial Private Sub Deletemcc_PollOption(instance As mcc_PollOption)
    End Sub
  Partial Private Sub Insertmcc_ArticleAd(instance As mcc_ArticleAd)
    End Sub
  Partial Private Sub Updatemcc_ArticleAd(instance As mcc_ArticleAd)
    End Sub
  Partial Private Sub Deletemcc_ArticleAd(instance As mcc_ArticleAd)
    End Sub
  Partial Private Sub Insertmcc_WebEvent(instance As mcc_WebEvent)
    End Sub
  Partial Private Sub Updatemcc_WebEvent(instance As mcc_WebEvent)
    End Sub
  Partial Private Sub Deletemcc_WebEvent(instance As mcc_WebEvent)
    End Sub
  Partial Private Sub Insertmcc_Image(instance As mcc_Image)
    End Sub
  Partial Private Sub Updatemcc_Image(instance As mcc_Image)
    End Sub
  Partial Private Sub Deletemcc_Image(instance As mcc_Image)
    End Sub
  Partial Private Sub Insertmcc_TagsArticle(instance As mcc_TagsArticle)
    End Sub
  Partial Private Sub Updatemcc_TagsArticle(instance As mcc_TagsArticle)
    End Sub
  Partial Private Sub Deletemcc_TagsArticle(instance As mcc_TagsArticle)
    End Sub
  Partial Private Sub Insertmcc_ArticleTag(instance As mcc_ArticleTag)
    End Sub
  Partial Private Sub Updatemcc_ArticleTag(instance As mcc_ArticleTag)
    End Sub
  Partial Private Sub Deletemcc_ArticleTag(instance As mcc_ArticleTag)
    End Sub
  Partial Private Sub Insertmcc_UserAnswerComment(instance As mcc_UserAnswerComment)
    End Sub
  Partial Private Sub Updatemcc_UserAnswerComment(instance As mcc_UserAnswerComment)
    End Sub
  Partial Private Sub Deletemcc_UserAnswerComment(instance As mcc_UserAnswerComment)
    End Sub
  Partial Private Sub Insertmcc_UserQuestionComment(instance As mcc_UserQuestionComment)
    End Sub
  Partial Private Sub Updatemcc_UserQuestionComment(instance As mcc_UserQuestionComment)
    End Sub
  Partial Private Sub Deletemcc_UserQuestionComment(instance As mcc_UserQuestionComment)
    End Sub
  Partial Private Sub Insertmcc_UsersAnswer_Vote(instance As mcc_UsersAnswer_Vote)
    End Sub
  Partial Private Sub Updatemcc_UsersAnswer_Vote(instance As mcc_UsersAnswer_Vote)
    End Sub
  Partial Private Sub Deletemcc_UsersAnswer_Vote(instance As mcc_UsersAnswer_Vote)
    End Sub
  Partial Private Sub Insertmcc_UsersQuestion_Vote(instance As mcc_UsersQuestion_Vote)
    End Sub
  Partial Private Sub Updatemcc_UsersQuestion_Vote(instance As mcc_UsersQuestion_Vote)
    End Sub
  Partial Private Sub Deletemcc_UsersQuestion_Vote(instance As mcc_UsersQuestion_Vote)
    End Sub
  Partial Private Sub Insertmcc_Video(instance As mcc_Video)
    End Sub
  Partial Private Sub Updatemcc_Video(instance As mcc_Video)
    End Sub
  Partial Private Sub Deletemcc_Video(instance As mcc_Video)
    End Sub
  Partial Private Sub Insertmcc_Ad(instance As mcc_Ad)
    End Sub
  Partial Private Sub Updatemcc_Ad(instance As mcc_Ad)
    End Sub
  Partial Private Sub Deletemcc_Ad(instance As mcc_Ad)
    End Sub
  Partial Private Sub Insertmcc_VideoTag(instance As mcc_VideoTag)
    End Sub
  Partial Private Sub Updatemcc_VideoTag(instance As mcc_VideoTag)
    End Sub
  Partial Private Sub Deletemcc_VideoTag(instance As mcc_VideoTag)
    End Sub
  Partial Private Sub Insertmcc_ImageTag(instance As mcc_ImageTag)
    End Sub
  Partial Private Sub Updatemcc_ImageTag(instance As mcc_ImageTag)
    End Sub
  Partial Private Sub Deletemcc_ImageTag(instance As mcc_ImageTag)
    End Sub
  Partial Private Sub Insertmcc_ResetCode(instance As mcc_ResetCode)
    End Sub
  Partial Private Sub Updatemcc_ResetCode(instance As mcc_ResetCode)
    End Sub
  Partial Private Sub Deletemcc_ResetCode(instance As mcc_ResetCode)
    End Sub
  Partial Private Sub Insertmcc_TagsImage(instance As mcc_TagsImage)
    End Sub
  Partial Private Sub Updatemcc_TagsImage(instance As mcc_TagsImage)
    End Sub
  Partial Private Sub Deletemcc_TagsImage(instance As mcc_TagsImage)
    End Sub
  Partial Private Sub Insertmcc_Article(instance As mcc_Article)
    End Sub
  Partial Private Sub Updatemcc_Article(instance As mcc_Article)
    End Sub
  Partial Private Sub Deletemcc_Article(instance As mcc_Article)
    End Sub
  Partial Private Sub Insertmcc_UserAnswer(instance As mcc_UserAnswer)
    End Sub
  Partial Private Sub Updatemcc_UserAnswer(instance As mcc_UserAnswer)
    End Sub
  Partial Private Sub Deletemcc_UserAnswer(instance As mcc_UserAnswer)
    End Sub
  Partial Private Sub Insertmcc_UserQuestion(instance As mcc_UserQuestion)
    End Sub
  Partial Private Sub Updatemcc_UserQuestion(instance As mcc_UserQuestion)
    End Sub
  Partial Private Sub Deletemcc_UserQuestion(instance As mcc_UserQuestion)
    End Sub
  Partial Private Sub Insertmcc_WikiPage(instance As mcc_WikiPage)
    End Sub
  Partial Private Sub Updatemcc_WikiPage(instance As mcc_WikiPage)
    End Sub
  Partial Private Sub Deletemcc_WikiPage(instance As mcc_WikiPage)
    End Sub
  Partial Private Sub Insertmcc_Advice(instance As mcc_Advice)
    End Sub
  Partial Private Sub Updatemcc_Advice(instance As mcc_Advice)
    End Sub
  Partial Private Sub Deletemcc_Advice(instance As mcc_Advice)
    End Sub
  Partial Private Sub Insertmcc_QuestionTracking(instance As mcc_QuestionTracking)
    End Sub
  Partial Private Sub Updatemcc_QuestionTracking(instance As mcc_QuestionTracking)
    End Sub
  Partial Private Sub Deletemcc_QuestionTracking(instance As mcc_QuestionTracking)
    End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property mcc_CategoriesAdvices() As System.Data.Linq.Table(Of mcc_CategoriesAdvice)
		Get
			Return Me.GetTable(Of mcc_CategoriesAdvice)
		End Get
	End Property
	
	Public ReadOnly Property mcc_BadWords() As System.Data.Linq.Table(Of mcc_BadWord)
		Get
			Return Me.GetTable(Of mcc_BadWord)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Word_Replaces() As System.Data.Linq.Table(Of mcc_Word_Replace)
		Get
			Return Me.GetTable(Of mcc_Word_Replace)
		End Get
	End Property
	
	Public ReadOnly Property mcc_BannedIPs() As System.Data.Linq.Table(Of mcc_BannedIP)
		Get
			Return Me.GetTable(Of mcc_BannedIP)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Registries() As System.Data.Linq.Table(Of mcc_Registry)
		Get
			Return Me.GetTable(Of mcc_Registry)
		End Get
	End Property
	
	Public ReadOnly Property mcc_HomePages() As System.Data.Linq.Table(Of mcc_HomePage)
		Get
			Return Me.GetTable(Of mcc_HomePage)
		End Get
	End Property
	
	Public ReadOnly Property mcc_ArticleCategories() As System.Data.Linq.Table(Of mcc_ArticleCategory)
		Get
			Return Me.GetTable(Of mcc_ArticleCategory)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Status() As System.Data.Linq.Table(Of mcc_Status)
		Get
			Return Me.GetTable(Of mcc_Status)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Feedbacks() As System.Data.Linq.Table(Of mcc_Feedback)
		Get
			Return Me.GetTable(Of mcc_Feedback)
		End Get
	End Property
	
	Public ReadOnly Property mcc_quotes() As System.Data.Linq.Table(Of mcc_quote)
		Get
			Return Me.GetTable(Of mcc_quote)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Comments() As System.Data.Linq.Table(Of mcc_Comment)
		Get
			Return Me.GetTable(Of mcc_Comment)
		End Get
	End Property
	
	Public ReadOnly Property mcc_questions() As System.Data.Linq.Table(Of mcc_question)
		Get
			Return Me.GetTable(Of mcc_question)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Contributions() As System.Data.Linq.Table(Of mcc_Contribution)
		Get
			Return Me.GetTable(Of mcc_Contribution)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Categories() As System.Data.Linq.Table(Of mcc_Category)
		Get
			Return Me.GetTable(Of mcc_Category)
		End Get
	End Property
	
	Public ReadOnly Property mcc_AdviceCategories() As System.Data.Linq.Table(Of mcc_AdviceCategory)
		Get
			Return Me.GetTable(Of mcc_AdviceCategory)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Tickets() As System.Data.Linq.Table(Of mcc_Ticket)
		Get
			Return Me.GetTable(Of mcc_Ticket)
		End Get
	End Property
	
	Public ReadOnly Property mcc_TicketChanges() As System.Data.Linq.Table(Of mcc_TicketChange)
		Get
			Return Me.GetTable(Of mcc_TicketChange)
		End Get
	End Property
	
	Public ReadOnly Property mcc_AdviceComments() As System.Data.Linq.Table(Of mcc_AdviceComment)
		Get
			Return Me.GetTable(Of mcc_AdviceComment)
		End Get
	End Property
	
	Public ReadOnly Property mcc_VideoCategories() As System.Data.Linq.Table(Of mcc_VideoCategory)
		Get
			Return Me.GetTable(Of mcc_VideoCategory)
		End Get
	End Property
	
	Public ReadOnly Property mcc_CategoriesVideos() As System.Data.Linq.Table(Of mcc_CategoriesVideo)
		Get
			Return Me.GetTable(Of mcc_CategoriesVideo)
		End Get
	End Property
	
	Public ReadOnly Property mcc_VideoComments() As System.Data.Linq.Table(Of mcc_VideoComment)
		Get
			Return Me.GetTable(Of mcc_VideoComment)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Polls() As System.Data.Linq.Table(Of mcc_Poll)
		Get
			Return Me.GetTable(Of mcc_Poll)
		End Get
	End Property
	
	Public ReadOnly Property mcc_PollOptions() As System.Data.Linq.Table(Of mcc_PollOption)
		Get
			Return Me.GetTable(Of mcc_PollOption)
		End Get
	End Property
	
	Public ReadOnly Property mcc_ArticleAds() As System.Data.Linq.Table(Of mcc_ArticleAd)
		Get
			Return Me.GetTable(Of mcc_ArticleAd)
		End Get
	End Property
	
	Public ReadOnly Property mcc_WebEvents() As System.Data.Linq.Table(Of mcc_WebEvent)
		Get
			Return Me.GetTable(Of mcc_WebEvent)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Images() As System.Data.Linq.Table(Of mcc_Image)
		Get
			Return Me.GetTable(Of mcc_Image)
		End Get
	End Property
	
	Public ReadOnly Property mcc_TagsArticles() As System.Data.Linq.Table(Of mcc_TagsArticle)
		Get
			Return Me.GetTable(Of mcc_TagsArticle)
		End Get
	End Property
	
	Public ReadOnly Property mcc_ArticleTags() As System.Data.Linq.Table(Of mcc_ArticleTag)
		Get
			Return Me.GetTable(Of mcc_ArticleTag)
		End Get
	End Property
	
	Public ReadOnly Property mcc_UserAnswerComments() As System.Data.Linq.Table(Of mcc_UserAnswerComment)
		Get
			Return Me.GetTable(Of mcc_UserAnswerComment)
		End Get
	End Property
	
	Public ReadOnly Property mcc_UserQuestionComments() As System.Data.Linq.Table(Of mcc_UserQuestionComment)
		Get
			Return Me.GetTable(Of mcc_UserQuestionComment)
		End Get
	End Property
	
	Public ReadOnly Property mcc_UsersAnswer_Votes() As System.Data.Linq.Table(Of mcc_UsersAnswer_Vote)
		Get
			Return Me.GetTable(Of mcc_UsersAnswer_Vote)
		End Get
	End Property
	
	Public ReadOnly Property mcc_UsersQuestion_Votes() As System.Data.Linq.Table(Of mcc_UsersQuestion_Vote)
		Get
			Return Me.GetTable(Of mcc_UsersQuestion_Vote)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Videos() As System.Data.Linq.Table(Of mcc_Video)
		Get
			Return Me.GetTable(Of mcc_Video)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Ads() As System.Data.Linq.Table(Of mcc_Ad)
		Get
			Return Me.GetTable(Of mcc_Ad)
		End Get
	End Property
	
	Public ReadOnly Property mcc_VideoTags() As System.Data.Linq.Table(Of mcc_VideoTag)
		Get
			Return Me.GetTable(Of mcc_VideoTag)
		End Get
	End Property
	
	Public ReadOnly Property mcc_ImageTags() As System.Data.Linq.Table(Of mcc_ImageTag)
		Get
			Return Me.GetTable(Of mcc_ImageTag)
		End Get
	End Property
	
	Public ReadOnly Property mcc_ResetCodes() As System.Data.Linq.Table(Of mcc_ResetCode)
		Get
			Return Me.GetTable(Of mcc_ResetCode)
		End Get
	End Property
	
	Public ReadOnly Property mcc_TagsImages() As System.Data.Linq.Table(Of mcc_TagsImage)
		Get
			Return Me.GetTable(Of mcc_TagsImage)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Articles() As System.Data.Linq.Table(Of mcc_Article)
		Get
			Return Me.GetTable(Of mcc_Article)
		End Get
	End Property
	
	Public ReadOnly Property mcc_UserAnswers() As System.Data.Linq.Table(Of mcc_UserAnswer)
		Get
			Return Me.GetTable(Of mcc_UserAnswer)
		End Get
	End Property
	
	Public ReadOnly Property mcc_UserQuestions() As System.Data.Linq.Table(Of mcc_UserQuestion)
		Get
			Return Me.GetTable(Of mcc_UserQuestion)
		End Get
	End Property
	
	Public ReadOnly Property mcc_WikiPages() As System.Data.Linq.Table(Of mcc_WikiPage)
		Get
			Return Me.GetTable(Of mcc_WikiPage)
		End Get
	End Property
	
	Public ReadOnly Property mcc_Advices() As System.Data.Linq.Table(Of mcc_Advice)
		Get
			Return Me.GetTable(Of mcc_Advice)
		End Get
	End Property
	
	Public ReadOnly Property mcc_QuestionTrackings() As System.Data.Linq.Table(Of mcc_QuestionTracking)
		Get
			Return Me.GetTable(Of mcc_QuestionTracking)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FindArticle", IsComposable:=true)>  _
	Public Function FindArticle(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As IQueryable(Of FindArticleResult)
		Return Me.CreateMethodCallQuery(Of FindArticleResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FindComments", IsComposable:=true)>  _
	Public Function FindComments(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As IQueryable(Of FindCommentsResult)
		Return Me.CreateMethodCallQuery(Of FindCommentsResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.FindVideo", IsComposable:=true)>  _
	Public Function FindVideo(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As IQueryable(Of FindVideoResult)
		Return Me.CreateMethodCallQuery(Of FindVideoResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.mcc_Articles_FindCommentsCount_linq", IsComposable:=true)>  _
	Public Function mcc_Articles_FindCommentsCount_linq(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.mcc_Articles_FindArticlesCount_linq", IsComposable:=true)>  _
	Public Function mcc_Articles_FindArticlesCount_linq(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.mcc_Videos_FindCommentsCount_linq", IsComposable:=true)>  _
	Public Function mcc_Videos_FindCommentsCount_linq(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.mcc_Videos_FindVideosCount_linq", IsComposable:=true)>  _
	Public Function mcc_Videos_FindVideosCount_linq(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SearchWord", DbType:="NVarChar(256)")> ByVal searchWord As String) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), searchWord).ReturnValue,System.Nullable(Of Integer))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_CategoriesAdvices")>  _
Partial Public Class mcc_CategoriesAdvice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _AdviceID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnAdviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdviceIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdviceID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AdviceID() As Integer
		Get
			Return Me._AdviceID
		End Get
		Set
			If ((Me._AdviceID = value)  _
						= false) Then
				Me.OnAdviceIDChanging(value)
				Me.SendPropertyChanging
				Me._AdviceID = value
				Me.SendPropertyChanged("AdviceID")
				Me.OnAdviceIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_BadWords")>  _
Partial Public Class mcc_BadWord
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Word As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnWordChanging(value As String)
    End Sub
    Partial Private Sub OnWordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Word", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Word() As String
		Get
			Return Me._Word
		End Get
		Set
			If (String.Equals(Me._Word, value) = false) Then
				Me.OnWordChanging(value)
				Me.SendPropertyChanging
				Me._Word = value
				Me.SendPropertyChanged("Word")
				Me.OnWordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Word_Replace")>  _
Partial Public Class mcc_Word_Replace
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _BadWord As String
	
	Private _GoodWord As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBadWordChanging(value As String)
    End Sub
    Partial Private Sub OnBadWordChanged()
    End Sub
    Partial Private Sub OnGoodWordChanging(value As String)
    End Sub
    Partial Private Sub OnGoodWordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BadWord", DbType:="NVarChar(27) NOT NULL", CanBeNull:=false)>  _
	Public Property BadWord() As String
		Get
			Return Me._BadWord
		End Get
		Set
			If (String.Equals(Me._BadWord, value) = false) Then
				Me.OnBadWordChanging(value)
				Me.SendPropertyChanging
				Me._BadWord = value
				Me.SendPropertyChanged("BadWord")
				Me.OnBadWordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GoodWord", DbType:="NVarChar(27) NOT NULL", CanBeNull:=false)>  _
	Public Property GoodWord() As String
		Get
			Return Me._GoodWord
		End Get
		Set
			If (String.Equals(Me._GoodWord, value) = false) Then
				Me.OnGoodWordChanging(value)
				Me.SendPropertyChanging
				Me._GoodWord = value
				Me.SendPropertyChanged("GoodWord")
				Me.OnGoodWordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_BannedIP")>  _
Partial Public Class mcc_BannedIP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Mask As String
	
	Private _since As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMaskChanging(value As String)
    End Sub
    Partial Private Sub OnMaskChanged()
    End Sub
    Partial Private Sub OnsinceChanging(value As Date)
    End Sub
    Partial Private Sub OnsinceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mask", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Mask() As String
		Get
			Return Me._Mask
		End Get
		Set
			If (String.Equals(Me._Mask, value) = false) Then
				Me.OnMaskChanging(value)
				Me.SendPropertyChanging
				Me._Mask = value
				Me.SendPropertyChanged("Mask")
				Me.OnMaskChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_since", DbType:="DateTime NOT NULL")>  _
	Public Property since() As Date
		Get
			Return Me._since
		End Get
		Set
			If ((Me._since = value)  _
						= false) Then
				Me.OnsinceChanging(value)
				Me.SendPropertyChanging
				Me._since = value
				Me.SendPropertyChanged("since")
				Me.OnsinceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Registry")>  _
Partial Public Class mcc_Registry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RegistryID As Integer
	
	Private _RegistryName As String
	
	Private _RegistryValue As String
	
	Private _Source As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRegistryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRegistryIDChanged()
    End Sub
    Partial Private Sub OnRegistryNameChanging(value As String)
    End Sub
    Partial Private Sub OnRegistryNameChanged()
    End Sub
    Partial Private Sub OnRegistryValueChanging(value As String)
    End Sub
    Partial Private Sub OnRegistryValueChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As String)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RegistryID() As Integer
		Get
			Return Me._RegistryID
		End Get
		Set
			If ((Me._RegistryID = value)  _
						= false) Then
				Me.OnRegistryIDChanging(value)
				Me.SendPropertyChanging
				Me._RegistryID = value
				Me.SendPropertyChanged("RegistryID")
				Me.OnRegistryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistryName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RegistryName() As String
		Get
			Return Me._RegistryName
		End Get
		Set
			If (String.Equals(Me._RegistryName, value) = false) Then
				Me.OnRegistryNameChanging(value)
				Me.SendPropertyChanging
				Me._RegistryName = value
				Me.SendPropertyChanged("RegistryName")
				Me.OnRegistryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegistryValue", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RegistryValue() As String
		Get
			Return Me._RegistryValue
		End Get
		Set
			If (String.Equals(Me._RegistryValue, value) = false) Then
				Me.OnRegistryValueChanging(value)
				Me.SendPropertyChanging
				Me._RegistryValue = value
				Me.SendPropertyChanged("RegistryValue")
				Me.OnRegistryValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Source", DbType:="NVarChar(50)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_HomePages")>  _
Partial Public Class mcc_HomePage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _HomePageId As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _ReleaseDate As Date
	
	Private _ExpireDate As Date
	
	Private _SpotlightId As System.Nullable(Of Integer)
	
	Private _MessageId As System.Nullable(Of Integer)
	
	Private _MainArticleId As Integer
	
	Private _TipId As System.Nullable(Of Integer)
	
	Private _Approved As Boolean
	
	Private _VideoId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHomePageIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHomePageIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnReleaseDateChanging(value As Date)
    End Sub
    Partial Private Sub OnReleaseDateChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnSpotlightIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSpotlightIdChanged()
    End Sub
    Partial Private Sub OnMessageIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMessageIdChanged()
    End Sub
    Partial Private Sub OnMainArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnMainArticleIdChanged()
    End Sub
    Partial Private Sub OnTipIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipIdChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnVideoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVideoIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePageId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property HomePageId() As Integer
		Get
			Return Me._HomePageId
		End Get
		Set
			If ((Me._HomePageId = value)  _
						= false) Then
				Me.OnHomePageIdChanging(value)
				Me.SendPropertyChanging
				Me._HomePageId = value
				Me.SendPropertyChanged("HomePageId")
				Me.OnHomePageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReleaseDate", DbType:="DateTime NOT NULL")>  _
	Public Property ReleaseDate() As Date
		Get
			Return Me._ReleaseDate
		End Get
		Set
			If ((Me._ReleaseDate = value)  _
						= false) Then
				Me.OnReleaseDateChanging(value)
				Me.SendPropertyChanging
				Me._ReleaseDate = value
				Me.SendPropertyChanged("ReleaseDate")
				Me.OnReleaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="DateTime NOT NULL")>  _
	Public Property ExpireDate() As Date
		Get
			Return Me._ExpireDate
		End Get
		Set
			If ((Me._ExpireDate = value)  _
						= false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpotlightId", DbType:="Int")>  _
	Public Property SpotlightId() As System.Nullable(Of Integer)
		Get
			Return Me._SpotlightId
		End Get
		Set
			If (Me._SpotlightId.Equals(value) = false) Then
				Me.OnSpotlightIdChanging(value)
				Me.SendPropertyChanging
				Me._SpotlightId = value
				Me.SendPropertyChanged("SpotlightId")
				Me.OnSpotlightIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageId", DbType:="Int")>  _
	Public Property MessageId() As System.Nullable(Of Integer)
		Get
			Return Me._MessageId
		End Get
		Set
			If (Me._MessageId.Equals(value) = false) Then
				Me.OnMessageIdChanging(value)
				Me.SendPropertyChanging
				Me._MessageId = value
				Me.SendPropertyChanged("MessageId")
				Me.OnMessageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainArticleId", DbType:="Int NOT NULL")>  _
	Public Property MainArticleId() As Integer
		Get
			Return Me._MainArticleId
		End Get
		Set
			If ((Me._MainArticleId = value)  _
						= false) Then
				Me.OnMainArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._MainArticleId = value
				Me.SendPropertyChanged("MainArticleId")
				Me.OnMainArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipId", DbType:="Int")>  _
	Public Property TipId() As System.Nullable(Of Integer)
		Get
			Return Me._TipId
		End Get
		Set
			If (Me._TipId.Equals(value) = false) Then
				Me.OnTipIdChanging(value)
				Me.SendPropertyChanging
				Me._TipId = value
				Me.SendPropertyChanged("TipId")
				Me.OnTipIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoId", DbType:="Int")>  _
	Public Property VideoId() As System.Nullable(Of Integer)
		Get
			Return Me._VideoId
		End Get
		Set
			If (Me._VideoId.Equals(value) = false) Then
				Me.OnVideoIdChanging(value)
				Me.SendPropertyChanging
				Me._VideoId = value
				Me.SendPropertyChanged("VideoId")
				Me.OnVideoIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_ArticleCategories")>  _
Partial Public Class mcc_ArticleCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryId As Integer
	
	Private _ArticleId As Integer
	
	Private _mcc_Category As EntityRef(Of mcc_Category)
	
	Private _mcc_Article As EntityRef(Of mcc_Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_Category = CType(Nothing, EntityRef(Of mcc_Category))
		Me._mcc_Article = CType(Nothing, EntityRef(Of mcc_Article))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				If Me._mcc_Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ArticleId() As Integer
		Get
			Return Me._ArticleId
		End Get
		Set
			If ((Me._ArticleId = value)  _
						= false) Then
				If Me._mcc_Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._ArticleId = value
				Me.SendPropertyChanged("ArticleId")
				Me.OnArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Category_mcc_ArticleCategory", Storage:="_mcc_Category", ThisKey:="CategoryId", OtherKey:="CategoryID", IsForeignKey:=true)>  _
	Public Property mcc_Category() As mcc_Category
		Get
			Return Me._mcc_Category.Entity
		End Get
		Set
			Dim previousValue As mcc_Category = Me._mcc_Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Category.Entity = Nothing
					previousValue.mcc_ArticleCategories.Remove(Me)
				End If
				Me._mcc_Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_ArticleCategories.Add(Me)
					Me._CategoryId = value.CategoryID
				Else
					Me._CategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Category")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Article_mcc_ArticleCategory", Storage:="_mcc_Article", ThisKey:="ArticleId", OtherKey:="ArticleID", IsForeignKey:=true)>  _
	Public Property mcc_Article() As mcc_Article
		Get
			Return Me._mcc_Article.Entity
		End Get
		Set
			Dim previousValue As mcc_Article = Me._mcc_Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Article.Entity = Nothing
					previousValue.mcc_ArticleCategories.Remove(Me)
				End If
				Me._mcc_Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_ArticleCategories.Add(Me)
					Me._ArticleId = value.ArticleID
				Else
					Me._ArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Status")>  _
Partial Public Class mcc_Status
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StatusId As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _value As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStatusIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnvalueChanging(value As Integer)
    End Sub
    Partial Private Sub OnvalueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StatusId() As Integer
		Get
			Return Me._StatusId
		End Get
		Set
			If ((Me._StatusId = value)  _
						= false) Then
				Me.OnStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._StatusId = value
				Me.SendPropertyChanged("StatusId")
				Me.OnStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="Int NOT NULL")>  _
	Public Property value() As Integer
		Get
			Return Me._value
		End Get
		Set
			If ((Me._value = value)  _
						= false) Then
				Me.OnvalueChanging(value)
				Me.SendPropertyChanging
				Me._value = value
				Me.SendPropertyChanged("value")
				Me.OnvalueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Feedback")>  _
Partial Public Class mcc_Feedback
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FeedbackID As Integer
	
	Private _AddedDate As Date
	
	Private _Description As String
	
	Private _Opened As Boolean
	
	Private _Approved As Boolean
	
	Private _Answered As Boolean
	
	Private _Title As String
	
	Private _Votes As Integer
	
	Private _AddedBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFeedbackIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFeedbackIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnOpenedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOpenedChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnAnsweredChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAnsweredChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As Integer)
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FeedbackID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FeedbackID() As Integer
		Get
			Return Me._FeedbackID
		End Get
		Set
			If ((Me._FeedbackID = value)  _
						= false) Then
				Me.OnFeedbackIDChanging(value)
				Me.SendPropertyChanging
				Me._FeedbackID = value
				Me.SendPropertyChanged("FeedbackID")
				Me.OnFeedbackIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1500) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Opened", DbType:="Bit NOT NULL")>  _
	Public Property Opened() As Boolean
		Get
			Return Me._Opened
		End Get
		Set
			If ((Me._Opened = value)  _
						= false) Then
				Me.OnOpenedChanging(value)
				Me.SendPropertyChanging
				Me._Opened = value
				Me.SendPropertyChanged("Opened")
				Me.OnOpenedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answered", DbType:="Bit NOT NULL")>  _
	Public Property Answered() As Boolean
		Get
			Return Me._Answered
		End Get
		Set
			If ((Me._Answered = value)  _
						= false) Then
				Me.OnAnsweredChanging(value)
				Me.SendPropertyChanging
				Me._Answered = value
				Me.SendPropertyChanged("Answered")
				Me.OnAnsweredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int NOT NULL")>  _
	Public Property Votes() As Integer
		Get
			Return Me._Votes
		End Get
		Set
			If ((Me._Votes = value)  _
						= false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256)")>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_quotes")>  _
Partial Public Class mcc_quote
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QuoteId As Integer
	
	Private _Body As String
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Author As String
	
	Private _Approved As Boolean
	
	Private _Role As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuoteIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuoteIdChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnAuthorChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuoteId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QuoteId() As Integer
		Get
			Return Me._QuoteId
		End Get
		Set
			If ((Me._QuoteId = value)  _
						= false) Then
				Me.OnQuoteIdChanging(value)
				Me.SendPropertyChanging
				Me._QuoteId = value
				Me.SendPropertyChanged("QuoteId")
				Me.OnQuoteIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Author", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Author() As String
		Get
			Return Me._Author
		End Get
		Set
			If (String.Equals(Me._Author, value) = false) Then
				Me.OnAuthorChanging(value)
				Me.SendPropertyChanging
				Me._Author = value
				Me.SendPropertyChanged("Author")
				Me.OnAuthorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="NVarChar(256)")>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Comments")>  _
Partial Public Class mcc_Comment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CommentID As Integer
	
	Private _AddedBy As String
	
	Private _AddedByEmail As String
	
	Private _AddedByIP As String
	
	Private _Body As String
	
	Private _ArticleID As Integer
	
	Private _AddedDate As Date
	
	Private _flag As Boolean
	
	Private _mcc_Article As EntityRef(Of mcc_Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCommentIDChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnAddedByEmailChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByEmailChanged()
    End Sub
    Partial Private Sub OnAddedByIPChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByIPChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnArticleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnflagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnflagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_Article = CType(Nothing, EntityRef(Of mcc_Article))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CommentID() As Integer
		Get
			Return Me._CommentID
		End Get
		Set
			If ((Me._CommentID = value)  _
						= false) Then
				Me.OnCommentIDChanging(value)
				Me.SendPropertyChanging
				Me._CommentID = value
				Me.SendPropertyChanged("CommentID")
				Me.OnCommentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedByEmail", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedByEmail() As String
		Get
			Return Me._AddedByEmail
		End Get
		Set
			If (String.Equals(Me._AddedByEmail, value) = false) Then
				Me.OnAddedByEmailChanging(value)
				Me.SendPropertyChanging
				Me._AddedByEmail = value
				Me.SendPropertyChanged("AddedByEmail")
				Me.OnAddedByEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedByIP", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedByIP() As String
		Get
			Return Me._AddedByIP
		End Get
		Set
			If (String.Equals(Me._AddedByIP, value) = false) Then
				Me.OnAddedByIPChanging(value)
				Me.SendPropertyChanging
				Me._AddedByIP = value
				Me.SendPropertyChanged("AddedByIP")
				Me.OnAddedByIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(4000) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleID", DbType:="Int NOT NULL")>  _
	Public Property ArticleID() As Integer
		Get
			Return Me._ArticleID
		End Get
		Set
			If ((Me._ArticleID = value)  _
						= false) Then
				If Me._mcc_Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIDChanging(value)
				Me.SendPropertyChanging
				Me._ArticleID = value
				Me.SendPropertyChanged("ArticleID")
				Me.OnArticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_flag", DbType:="Bit NOT NULL")>  _
	Public Property flag() As Boolean
		Get
			Return Me._flag
		End Get
		Set
			If ((Me._flag = value)  _
						= false) Then
				Me.OnflagChanging(value)
				Me.SendPropertyChanging
				Me._flag = value
				Me.SendPropertyChanged("flag")
				Me.OnflagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Article_mcc_Comment", Storage:="_mcc_Article", ThisKey:="ArticleID", OtherKey:="ArticleID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property mcc_Article() As mcc_Article
		Get
			Return Me._mcc_Article.Entity
		End Get
		Set
			Dim previousValue As mcc_Article = Me._mcc_Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Article.Entity = Nothing
					previousValue.mcc_Comments.Remove(Me)
				End If
				Me._mcc_Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_Comments.Add(Me)
					Me._ArticleID = value.ArticleID
				Else
					Me._ArticleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_questions")>  _
Partial Public Class mcc_question
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QuestionId As Integer
	
	Private _Title As String
	
	Private _QuestionUrl As String
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _ReleaseDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuestionIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnQuestionUrlChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionUrlChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnReleaseDateChanging(value As Date)
    End Sub
    Partial Private Sub OnReleaseDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QuestionId() As Integer
		Get
			Return Me._QuestionId
		End Get
		Set
			If ((Me._QuestionId = value)  _
						= false) Then
				Me.OnQuestionIdChanging(value)
				Me.SendPropertyChanging
				Me._QuestionId = value
				Me.SendPropertyChanged("QuestionId")
				Me.OnQuestionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionUrl", DbType:="NVarChar(512) NOT NULL", CanBeNull:=false)>  _
	Public Property QuestionUrl() As String
		Get
			Return Me._QuestionUrl
		End Get
		Set
			If (String.Equals(Me._QuestionUrl, value) = false) Then
				Me.OnQuestionUrlChanging(value)
				Me.SendPropertyChanging
				Me._QuestionUrl = value
				Me.SendPropertyChanged("QuestionUrl")
				Me.OnQuestionUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256)")>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReleaseDate", DbType:="DateTime NOT NULL")>  _
	Public Property ReleaseDate() As Date
		Get
			Return Me._ReleaseDate
		End Get
		Set
			If ((Me._ReleaseDate = value)  _
						= false) Then
				Me.OnReleaseDateChanging(value)
				Me.SendPropertyChanging
				Me._ReleaseDate = value
				Me.SendPropertyChanged("ReleaseDate")
				Me.OnReleaseDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Contributions")>  _
Partial Public Class mcc_Contribution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ContributionID As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Reviewed As Boolean
	
	Private _Body As String
	
	Private _Comments As String
	
	Private _Title As String
	
	Private _Approved As Boolean
	
	Private _Email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContributionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContributionIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnReviewedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnReviewedChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContributionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ContributionID() As Integer
		Get
			Return Me._ContributionID
		End Get
		Set
			If ((Me._ContributionID = value)  _
						= false) Then
				Me.OnContributionIDChanging(value)
				Me.SendPropertyChanging
				Me._ContributionID = value
				Me.SendPropertyChanged("ContributionID")
				Me.OnContributionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reviewed", DbType:="Bit NOT NULL")>  _
	Public Property Reviewed() As Boolean
		Get
			Return Me._Reviewed
		End Get
		Set
			If ((Me._Reviewed = value)  _
						= false) Then
				Me.OnReviewedChanging(value)
				Me.SendPropertyChanging
				Me._Reviewed = value
				Me.SendPropertyChanged("Reviewed")
				Me.OnReviewedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(500)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Categories")>  _
Partial Public Class mcc_Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Importance As Integer
	
	Private _ImageUrl As String
	
	Private _Slug As String
	
	Private _ParentCategoryID As Integer
	
	Private _mcc_ArticleCategories As EntitySet(Of mcc_ArticleCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnImportanceChanging(value As Integer)
    End Sub
    Partial Private Sub OnImportanceChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnParentCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnParentCategoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_ArticleCategories = New EntitySet(Of mcc_ArticleCategory)(AddressOf Me.attach_mcc_ArticleCategories, AddressOf Me.detach_mcc_ArticleCategories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(4000)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importance", DbType:="Int NOT NULL")>  _
	Public Property Importance() As Integer
		Get
			Return Me._Importance
		End Get
		Set
			If ((Me._Importance = value)  _
						= false) Then
				Me.OnImportanceChanging(value)
				Me.SendPropertyChanging
				Me._Importance = value
				Me.SendPropertyChanged("Importance")
				Me.OnImportanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(256)")>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256)")>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentCategoryID", DbType:="Int NOT NULL")>  _
	Public Property ParentCategoryID() As Integer
		Get
			Return Me._ParentCategoryID
		End Get
		Set
			If ((Me._ParentCategoryID = value)  _
						= false) Then
				Me.OnParentCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentCategoryID = value
				Me.SendPropertyChanged("ParentCategoryID")
				Me.OnParentCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Category_mcc_ArticleCategory", Storage:="_mcc_ArticleCategories", ThisKey:="CategoryID", OtherKey:="CategoryId")>  _
	Public Property mcc_ArticleCategories() As EntitySet(Of mcc_ArticleCategory)
		Get
			Return Me._mcc_ArticleCategories
		End Get
		Set
			Me._mcc_ArticleCategories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_ArticleCategories(ByVal entity As mcc_ArticleCategory)
		Me.SendPropertyChanging
		entity.mcc_Category = Me
	End Sub
	
	Private Sub detach_mcc_ArticleCategories(ByVal entity As mcc_ArticleCategory)
		Me.SendPropertyChanging
		entity.mcc_Category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_AdviceCategories")>  _
Partial Public Class mcc_AdviceCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryID As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Slug As String
	
	Private _ParentCategoryID As System.Nullable(Of Integer)
	
	Private _Importance As Integer
	
	Private _ImageUrl As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnParentCategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentCategoryIDChanged()
    End Sub
    Partial Private Sub OnImportanceChanging(value As Integer)
    End Sub
    Partial Private Sub OnImportanceChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(4000)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentCategoryID", DbType:="Int")>  _
	Public Property ParentCategoryID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentCategoryID
		End Get
		Set
			If (Me._ParentCategoryID.Equals(value) = false) Then
				Me.OnParentCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentCategoryID = value
				Me.SendPropertyChanged("ParentCategoryID")
				Me.OnParentCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importance", DbType:="Int NOT NULL")>  _
	Public Property Importance() As Integer
		Get
			Return Me._Importance
		End Get
		Set
			If ((Me._Importance = value)  _
						= false) Then
				Me.OnImportanceChanging(value)
				Me.SendPropertyChanging
				Me._Importance = value
				Me.SendPropertyChanged("Importance")
				Me.OnImportanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(256)")>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Tickets")>  _
Partial Public Class mcc_Ticket
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TicketId As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Owner As String
	
	Private _Status As Integer
	
	Private _Resolver As String
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Priority As Integer
	
	Private _Keywords As String
	
	Private _Type As Integer
	
	Private _mcc_TicketChanges As EntitySet(Of mcc_TicketChange)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTicketIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTicketIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnResolverChanging(value As String)
    End Sub
    Partial Private Sub OnResolverChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_TicketChanges = New EntitySet(Of mcc_TicketChange)(AddressOf Me.attach_mcc_TicketChanges, AddressOf Me.detach_mcc_TicketChanges)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TicketId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TicketId() As Integer
		Get
			Return Me._TicketId
		End Get
		Set
			If ((Me._TicketId = value)  _
						= false) Then
				Me.OnTicketIdChanging(value)
				Me.SendPropertyChanging
				Me._TicketId = value
				Me.SendPropertyChanged("TicketId")
				Me.OnTicketIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(2000)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Owner() As String
		Get
			Return Me._Owner
		End Get
		Set
			If (String.Equals(Me._Owner, value) = false) Then
				Me.OnOwnerChanging(value)
				Me.SendPropertyChanging
				Me._Owner = value
				Me.SendPropertyChanged("Owner")
				Me.OnOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resolver", DbType:="NVarChar(256)")>  _
	Public Property Resolver() As String
		Get
			Return Me._Resolver
		End Get
		Set
			If (String.Equals(Me._Resolver, value) = false) Then
				Me.OnResolverChanging(value)
				Me.SendPropertyChanging
				Me._Resolver = value
				Me.SendPropertyChanged("Resolver")
				Me.OnResolverChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int NOT NULL")>  _
	Public Property Priority() As Integer
		Get
			Return Me._Priority
		End Get
		Set
			If ((Me._Priority = value)  _
						= false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(256)")>  _
	Public Property Keywords() As String
		Get
			Return Me._Keywords
		End Get
		Set
			If (String.Equals(Me._Keywords, value) = false) Then
				Me.OnKeywordsChanging(value)
				Me.SendPropertyChanging
				Me._Keywords = value
				Me.SendPropertyChanged("Keywords")
				Me.OnKeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int NOT NULL")>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Ticket_mcc_TicketChange", Storage:="_mcc_TicketChanges", ThisKey:="TicketId", OtherKey:="TicketId")>  _
	Public Property mcc_TicketChanges() As EntitySet(Of mcc_TicketChange)
		Get
			Return Me._mcc_TicketChanges
		End Get
		Set
			Me._mcc_TicketChanges.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_TicketChanges(ByVal entity As mcc_TicketChange)
		Me.SendPropertyChanging
		entity.mcc_Ticket = Me
	End Sub
	
	Private Sub detach_mcc_TicketChanges(ByVal entity As mcc_TicketChange)
		Me.SendPropertyChanging
		entity.mcc_Ticket = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_TicketChanges")>  _
Partial Public Class mcc_TicketChange
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TicketChangeId As Integer
	
	Private _TicketId As Integer
	
	Private _AddedDate As Date
	
	Private _Addedby As String
	
	Private _Body As String
	
	Private _mcc_Ticket As EntityRef(Of mcc_Ticket)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTicketChangeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTicketChangeIdChanged()
    End Sub
    Partial Private Sub OnTicketIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTicketIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedbyChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_Ticket = CType(Nothing, EntityRef(Of mcc_Ticket))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TicketChangeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TicketChangeId() As Integer
		Get
			Return Me._TicketChangeId
		End Get
		Set
			If ((Me._TicketChangeId = value)  _
						= false) Then
				Me.OnTicketChangeIdChanging(value)
				Me.SendPropertyChanging
				Me._TicketChangeId = value
				Me.SendPropertyChanged("TicketChangeId")
				Me.OnTicketChangeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TicketId", DbType:="Int NOT NULL")>  _
	Public Property TicketId() As Integer
		Get
			Return Me._TicketId
		End Get
		Set
			If ((Me._TicketId = value)  _
						= false) Then
				If Me._mcc_Ticket.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTicketIdChanging(value)
				Me.SendPropertyChanging
				Me._TicketId = value
				Me.SendPropertyChanged("TicketId")
				Me.OnTicketIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Addedby", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Addedby() As String
		Get
			Return Me._Addedby
		End Get
		Set
			If (String.Equals(Me._Addedby, value) = false) Then
				Me.OnAddedbyChanging(value)
				Me.SendPropertyChanging
				Me._Addedby = value
				Me.SendPropertyChanged("Addedby")
				Me.OnAddedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Ticket_mcc_TicketChange", Storage:="_mcc_Ticket", ThisKey:="TicketId", OtherKey:="TicketId", IsForeignKey:=true)>  _
	Public Property mcc_Ticket() As mcc_Ticket
		Get
			Return Me._mcc_Ticket.Entity
		End Get
		Set
			Dim previousValue As mcc_Ticket = Me._mcc_Ticket.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Ticket.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Ticket.Entity = Nothing
					previousValue.mcc_TicketChanges.Remove(Me)
				End If
				Me._mcc_Ticket.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_TicketChanges.Add(Me)
					Me._TicketId = value.TicketId
				Else
					Me._TicketId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Ticket")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_AdviceComments")>  _
Partial Public Class mcc_AdviceComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CommentID As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _AddedByEmail As String
	
	Private _AddedbyIP As String
	
	Private _Body As String
	
	Private _AdviceId As Integer
	
	Private _flag As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCommentIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnAddedByEmailChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByEmailChanged()
    End Sub
    Partial Private Sub OnAddedbyIPChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyIPChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAdviceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdviceIdChanged()
    End Sub
    Partial Private Sub OnflagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnflagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CommentID() As Integer
		Get
			Return Me._CommentID
		End Get
		Set
			If ((Me._CommentID = value)  _
						= false) Then
				Me.OnCommentIDChanging(value)
				Me.SendPropertyChanging
				Me._CommentID = value
				Me.SendPropertyChanged("CommentID")
				Me.OnCommentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedByEmail", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedByEmail() As String
		Get
			Return Me._AddedByEmail
		End Get
		Set
			If (String.Equals(Me._AddedByEmail, value) = false) Then
				Me.OnAddedByEmailChanging(value)
				Me.SendPropertyChanging
				Me._AddedByEmail = value
				Me.SendPropertyChanged("AddedByEmail")
				Me.OnAddedByEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedbyIP", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedbyIP() As String
		Get
			Return Me._AddedbyIP
		End Get
		Set
			If (String.Equals(Me._AddedbyIP, value) = false) Then
				Me.OnAddedbyIPChanging(value)
				Me.SendPropertyChanging
				Me._AddedbyIP = value
				Me.SendPropertyChanged("AddedbyIP")
				Me.OnAddedbyIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdviceId", DbType:="Int NOT NULL")>  _
	Public Property AdviceId() As Integer
		Get
			Return Me._AdviceId
		End Get
		Set
			If ((Me._AdviceId = value)  _
						= false) Then
				Me.OnAdviceIdChanging(value)
				Me.SendPropertyChanging
				Me._AdviceId = value
				Me.SendPropertyChanged("AdviceId")
				Me.OnAdviceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_flag", DbType:="Bit NOT NULL")>  _
	Public Property flag() As Boolean
		Get
			Return Me._flag
		End Get
		Set
			If ((Me._flag = value)  _
						= false) Then
				Me.OnflagChanging(value)
				Me.SendPropertyChanging
				Me._flag = value
				Me.SendPropertyChanged("flag")
				Me.OnflagChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_VideoCategories")>  _
Partial Public Class mcc_VideoCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryId As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Importance As Integer
	
	Private _ImageUrl As String
	
	Private _Slug As String
	
	Private _ParentCategoryID As Integer
	
	Private _mcc_CategoriesVideos As EntitySet(Of mcc_CategoriesVideo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnImportanceChanging(value As Integer)
    End Sub
    Partial Private Sub OnImportanceChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnParentCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnParentCategoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_CategoriesVideos = New EntitySet(Of mcc_CategoriesVideo)(AddressOf Me.attach_mcc_CategoriesVideos, AddressOf Me.detach_mcc_CategoriesVideos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Importance", DbType:="Int NOT NULL")>  _
	Public Property Importance() As Integer
		Get
			Return Me._Importance
		End Get
		Set
			If ((Me._Importance = value)  _
						= false) Then
				Me.OnImportanceChanging(value)
				Me.SendPropertyChanging
				Me._Importance = value
				Me.SendPropertyChanged("Importance")
				Me.OnImportanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(256)")>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256)")>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentCategoryID", DbType:="Int NOT NULL")>  _
	Public Property ParentCategoryID() As Integer
		Get
			Return Me._ParentCategoryID
		End Get
		Set
			If ((Me._ParentCategoryID = value)  _
						= false) Then
				Me.OnParentCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentCategoryID = value
				Me.SendPropertyChanged("ParentCategoryID")
				Me.OnParentCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_VideoCategory_mcc_CategoriesVideo", Storage:="_mcc_CategoriesVideos", ThisKey:="CategoryId", OtherKey:="CategoryId")>  _
	Public Property mcc_CategoriesVideos() As EntitySet(Of mcc_CategoriesVideo)
		Get
			Return Me._mcc_CategoriesVideos
		End Get
		Set
			Me._mcc_CategoriesVideos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_CategoriesVideos(ByVal entity As mcc_CategoriesVideo)
		Me.SendPropertyChanging
		entity.mcc_VideoCategory = Me
	End Sub
	
	Private Sub detach_mcc_CategoriesVideos(ByVal entity As mcc_CategoriesVideo)
		Me.SendPropertyChanging
		entity.mcc_VideoCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_CategoriesVideos")>  _
Partial Public Class mcc_CategoriesVideo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryId As Integer
	
	Private _VideoId As Integer
	
	Private _mcc_VideoCategory As EntityRef(Of mcc_VideoCategory)
	
	Private _mcc_Video As EntityRef(Of mcc_Video)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnVideoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVideoIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_VideoCategory = CType(Nothing, EntityRef(Of mcc_VideoCategory))
		Me._mcc_Video = CType(Nothing, EntityRef(Of mcc_Video))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				If Me._mcc_VideoCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property VideoId() As Integer
		Get
			Return Me._VideoId
		End Get
		Set
			If ((Me._VideoId = value)  _
						= false) Then
				If Me._mcc_Video.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVideoIdChanging(value)
				Me.SendPropertyChanging
				Me._VideoId = value
				Me.SendPropertyChanged("VideoId")
				Me.OnVideoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_VideoCategory_mcc_CategoriesVideo", Storage:="_mcc_VideoCategory", ThisKey:="CategoryId", OtherKey:="CategoryId", IsForeignKey:=true)>  _
	Public Property mcc_VideoCategory() As mcc_VideoCategory
		Get
			Return Me._mcc_VideoCategory.Entity
		End Get
		Set
			Dim previousValue As mcc_VideoCategory = Me._mcc_VideoCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_VideoCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_VideoCategory.Entity = Nothing
					previousValue.mcc_CategoriesVideos.Remove(Me)
				End If
				Me._mcc_VideoCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_CategoriesVideos.Add(Me)
					Me._CategoryId = value.CategoryId
				Else
					Me._CategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_VideoCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Video_mcc_CategoriesVideo", Storage:="_mcc_Video", ThisKey:="VideoId", OtherKey:="VideoId", IsForeignKey:=true)>  _
	Public Property mcc_Video() As mcc_Video
		Get
			Return Me._mcc_Video.Entity
		End Get
		Set
			Dim previousValue As mcc_Video = Me._mcc_Video.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Video.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Video.Entity = Nothing
					previousValue.mcc_CategoriesVideos.Remove(Me)
				End If
				Me._mcc_Video.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_CategoriesVideos.Add(Me)
					Me._VideoId = value.VideoId
				Else
					Me._VideoId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Video")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_VideoComment")>  _
Partial Public Class mcc_VideoComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CommentID As Integer
	
	Private _flag As Boolean
	
	Private _Title As String
	
	Private _VideoID As Integer
	
	Private _AddedDate As Date
	
	Private _Addedby As String
	
	Private _AddedbyIP As String
	
	Private _Body As String
	
	Private _AddedbyEmail As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCommentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCommentIDChanged()
    End Sub
    Partial Private Sub OnflagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnflagChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnVideoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVideoIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedbyChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyChanged()
    End Sub
    Partial Private Sub OnAddedbyIPChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyIPChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAddedbyEmailChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CommentID() As Integer
		Get
			Return Me._CommentID
		End Get
		Set
			If ((Me._CommentID = value)  _
						= false) Then
				Me.OnCommentIDChanging(value)
				Me.SendPropertyChanging
				Me._CommentID = value
				Me.SendPropertyChanged("CommentID")
				Me.OnCommentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_flag", DbType:="Bit NOT NULL")>  _
	Public Property flag() As Boolean
		Get
			Return Me._flag
		End Get
		Set
			If ((Me._flag = value)  _
						= false) Then
				Me.OnflagChanging(value)
				Me.SendPropertyChanging
				Me._flag = value
				Me.SendPropertyChanged("flag")
				Me.OnflagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoID", DbType:="Int NOT NULL")>  _
	Public Property VideoID() As Integer
		Get
			Return Me._VideoID
		End Get
		Set
			If ((Me._VideoID = value)  _
						= false) Then
				Me.OnVideoIDChanging(value)
				Me.SendPropertyChanging
				Me._VideoID = value
				Me.SendPropertyChanged("VideoID")
				Me.OnVideoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Addedby", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Addedby() As String
		Get
			Return Me._Addedby
		End Get
		Set
			If (String.Equals(Me._Addedby, value) = false) Then
				Me.OnAddedbyChanging(value)
				Me.SendPropertyChanging
				Me._Addedby = value
				Me.SendPropertyChanged("Addedby")
				Me.OnAddedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedbyIP", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedbyIP() As String
		Get
			Return Me._AddedbyIP
		End Get
		Set
			If (String.Equals(Me._AddedbyIP, value) = false) Then
				Me.OnAddedbyIPChanging(value)
				Me.SendPropertyChanging
				Me._AddedbyIP = value
				Me.SendPropertyChanged("AddedbyIP")
				Me.OnAddedbyIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(2000) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedbyEmail", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedbyEmail() As String
		Get
			Return Me._AddedbyEmail
		End Get
		Set
			If (String.Equals(Me._AddedbyEmail, value) = false) Then
				Me.OnAddedbyEmailChanging(value)
				Me.SendPropertyChanging
				Me._AddedbyEmail = value
				Me.SendPropertyChanged("AddedbyEmail")
				Me.OnAddedbyEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Polls")>  _
Partial Public Class mcc_Poll
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PollId As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _QuestionText As String
	
	Private _isArchived As Boolean
	
	Private _ArchiveDate As System.Nullable(Of Date)
	
	Private _mcc_PollOptions As EntitySet(Of mcc_PollOption)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPollIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPollIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnQuestionTextChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTextChanged()
    End Sub
    Partial Private Sub OnisArchivedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnisArchivedChanged()
    End Sub
    Partial Private Sub OnArchiveDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnArchiveDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_PollOptions = New EntitySet(Of mcc_PollOption)(AddressOf Me.attach_mcc_PollOptions, AddressOf Me.detach_mcc_PollOptions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PollId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PollId() As Integer
		Get
			Return Me._PollId
		End Get
		Set
			If ((Me._PollId = value)  _
						= false) Then
				Me.OnPollIdChanging(value)
				Me.SendPropertyChanging
				Me._PollId = value
				Me.SendPropertyChanged("PollId")
				Me.OnPollIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuestionText", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property QuestionText() As String
		Get
			Return Me._QuestionText
		End Get
		Set
			If (String.Equals(Me._QuestionText, value) = false) Then
				Me.OnQuestionTextChanging(value)
				Me.SendPropertyChanging
				Me._QuestionText = value
				Me.SendPropertyChanged("QuestionText")
				Me.OnQuestionTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isArchived", DbType:="Bit NOT NULL")>  _
	Public Property isArchived() As Boolean
		Get
			Return Me._isArchived
		End Get
		Set
			If ((Me._isArchived = value)  _
						= false) Then
				Me.OnisArchivedChanging(value)
				Me.SendPropertyChanging
				Me._isArchived = value
				Me.SendPropertyChanged("isArchived")
				Me.OnisArchivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveDate", DbType:="DateTime")>  _
	Public Property ArchiveDate() As System.Nullable(Of Date)
		Get
			Return Me._ArchiveDate
		End Get
		Set
			If (Me._ArchiveDate.Equals(value) = false) Then
				Me.OnArchiveDateChanging(value)
				Me.SendPropertyChanging
				Me._ArchiveDate = value
				Me.SendPropertyChanged("ArchiveDate")
				Me.OnArchiveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Poll_mcc_PollOption", Storage:="_mcc_PollOptions", ThisKey:="PollId", OtherKey:="PollId")>  _
	Public Property mcc_PollOptions() As EntitySet(Of mcc_PollOption)
		Get
			Return Me._mcc_PollOptions
		End Get
		Set
			Me._mcc_PollOptions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_PollOptions(ByVal entity As mcc_PollOption)
		Me.SendPropertyChanging
		entity.mcc_Poll = Me
	End Sub
	
	Private Sub detach_mcc_PollOptions(ByVal entity As mcc_PollOption)
		Me.SendPropertyChanging
		entity.mcc_Poll = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_PollOptions")>  _
Partial Public Class mcc_PollOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OptionId As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _PollId As Integer
	
	Private _OptionText As String
	
	Private _Votes As System.Nullable(Of Integer)
	
	Private _mcc_Poll As EntityRef(Of mcc_Poll)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOptionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOptionIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnPollIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPollIdChanged()
    End Sub
    Partial Private Sub OnOptionTextChanging(value As String)
    End Sub
    Partial Private Sub OnOptionTextChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_Poll = CType(Nothing, EntityRef(Of mcc_Poll))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OptionId() As Integer
		Get
			Return Me._OptionId
		End Get
		Set
			If ((Me._OptionId = value)  _
						= false) Then
				Me.OnOptionIdChanging(value)
				Me.SendPropertyChanging
				Me._OptionId = value
				Me.SendPropertyChanged("OptionId")
				Me.OnOptionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PollId", DbType:="Int NOT NULL")>  _
	Public Property PollId() As Integer
		Get
			Return Me._PollId
		End Get
		Set
			If ((Me._PollId = value)  _
						= false) Then
				If Me._mcc_Poll.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPollIdChanging(value)
				Me.SendPropertyChanging
				Me._PollId = value
				Me.SendPropertyChanged("PollId")
				Me.OnPollIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptionText", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property OptionText() As String
		Get
			Return Me._OptionText
		End Get
		Set
			If (String.Equals(Me._OptionText, value) = false) Then
				Me.OnOptionTextChanging(value)
				Me.SendPropertyChanging
				Me._OptionText = value
				Me.SendPropertyChanged("OptionText")
				Me.OnOptionTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int")>  _
	Public Property Votes() As System.Nullable(Of Integer)
		Get
			Return Me._Votes
		End Get
		Set
			If (Me._Votes.Equals(value) = false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Poll_mcc_PollOption", Storage:="_mcc_Poll", ThisKey:="PollId", OtherKey:="PollId", IsForeignKey:=true)>  _
	Public Property mcc_Poll() As mcc_Poll
		Get
			Return Me._mcc_Poll.Entity
		End Get
		Set
			Dim previousValue As mcc_Poll = Me._mcc_Poll.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Poll.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Poll.Entity = Nothing
					previousValue.mcc_PollOptions.Remove(Me)
				End If
				Me._mcc_Poll.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_PollOptions.Add(Me)
					Me._PollId = value.PollId
				Else
					Me._PollId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Poll")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_ArticleAds")>  _
Partial Public Class mcc_ArticleAd
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ArticleID As Integer
	
	Private _AdID As Integer
	
	Private _mcc_ArticleAd1 As EntityRef(Of mcc_ArticleAd)
	
	Private _mcc_ArticleAd As EntityRef(Of mcc_ArticleAd)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnArticleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIDChanged()
    End Sub
    Partial Private Sub OnAdIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_ArticleAd1 = CType(Nothing, EntityRef(Of mcc_ArticleAd))
		Me._mcc_ArticleAd = CType(Nothing, EntityRef(Of mcc_ArticleAd))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ArticleID() As Integer
		Get
			Return Me._ArticleID
		End Get
		Set
			If ((Me._ArticleID = value)  _
						= false) Then
				If Me._mcc_ArticleAd.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIDChanging(value)
				Me.SendPropertyChanging
				Me._ArticleID = value
				Me.SendPropertyChanged("ArticleID")
				Me.OnArticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AdID() As Integer
		Get
			Return Me._AdID
		End Get
		Set
			If ((Me._AdID = value)  _
						= false) Then
				If Me._mcc_ArticleAd.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAdIDChanging(value)
				Me.SendPropertyChanging
				Me._AdID = value
				Me.SendPropertyChanged("AdID")
				Me.OnAdIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_ArticleAd_mcc_ArticleAd", Storage:="_mcc_ArticleAd1", ThisKey:="ArticleID,AdID", OtherKey:="ArticleID,AdID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property mcc_ArticleAd1() As mcc_ArticleAd
		Get
			Return Me._mcc_ArticleAd1.Entity
		End Get
		Set
			Dim previousValue As mcc_ArticleAd = Me._mcc_ArticleAd1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_ArticleAd1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_ArticleAd1.Entity = Nothing
					previousValue.mcc_ArticleAd = Nothing
				End If
				Me._mcc_ArticleAd1.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.mcc_ArticleAd = Me
				End If
				Me.SendPropertyChanged("mcc_ArticleAd1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_ArticleAd_mcc_ArticleAd", Storage:="_mcc_ArticleAd", ThisKey:="ArticleID,AdID", OtherKey:="ArticleID,AdID", IsForeignKey:=true)>  _
	Public Property mcc_ArticleAd() As mcc_ArticleAd
		Get
			Return Me._mcc_ArticleAd.Entity
		End Get
		Set
			Dim previousValue As mcc_ArticleAd = Me._mcc_ArticleAd.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_ArticleAd.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_ArticleAd.Entity = Nothing
					previousValue.mcc_ArticleAd1 = Nothing
				End If
				Me._mcc_ArticleAd.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_ArticleAd1 = Me
					Me._ArticleID = value.ArticleID
					Me._AdID = value.AdID
				Else
					Me._ArticleID = CType(Nothing, Integer)
					Me._AdID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_ArticleAd")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_WebEvent_Events")>  _
Partial Public Class mcc_WebEvent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventId As String
	
	Private _EventTimeUtc As Date
	
	Private _EventTime As Date
	
	Private _EventType As String
	
	Private _EventSequence As Decimal
	
	Private _EventOccurrence As Decimal
	
	Private _EventCode As Integer
	
	Private _EventDetailCode As Integer
	
	Private _Message As String
	
	Private _ApplicationPath As String
	
	Private _ApplicationVirtualPath As String
	
	Private _MachineName As String
	
	Private _RequestUrl As String
	
	Private _ExceptionType As String
	
	Private _Details As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventIdChanging(value As String)
    End Sub
    Partial Private Sub OnEventIdChanged()
    End Sub
    Partial Private Sub OnEventTimeUtcChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeUtcChanged()
    End Sub
    Partial Private Sub OnEventTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnEventTimeChanged()
    End Sub
    Partial Private Sub OnEventTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEventTypeChanged()
    End Sub
    Partial Private Sub OnEventSequenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventSequenceChanged()
    End Sub
    Partial Private Sub OnEventOccurrenceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnEventOccurrenceChanged()
    End Sub
    Partial Private Sub OnEventCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventCodeChanged()
    End Sub
    Partial Private Sub OnEventDetailCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventDetailCodeChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnApplicationPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationPathChanged()
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationVirtualPathChanged()
    End Sub
    Partial Private Sub OnMachineNameChanging(value As String)
    End Sub
    Partial Private Sub OnMachineNameChanged()
    End Sub
    Partial Private Sub OnRequestUrlChanging(value As String)
    End Sub
    Partial Private Sub OnRequestUrlChanged()
    End Sub
    Partial Private Sub OnExceptionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnExceptionTypeChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventId", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property EventId() As String
		Get
			Return Me._EventId
		End Get
		Set
			If (String.Equals(Me._EventId, value) = false) Then
				Me.OnEventIdChanging(value)
				Me.SendPropertyChanging
				Me._EventId = value
				Me.SendPropertyChanged("EventId")
				Me.OnEventIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTimeUtc", DbType:="DateTime NOT NULL")>  _
	Public Property EventTimeUtc() As Date
		Get
			Return Me._EventTimeUtc
		End Get
		Set
			If ((Me._EventTimeUtc = value)  _
						= false) Then
				Me.OnEventTimeUtcChanging(value)
				Me.SendPropertyChanging
				Me._EventTimeUtc = value
				Me.SendPropertyChanged("EventTimeUtc")
				Me.OnEventTimeUtcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTime", DbType:="DateTime NOT NULL")>  _
	Public Property EventTime() As Date
		Get
			Return Me._EventTime
		End Get
		Set
			If ((Me._EventTime = value)  _
						= false) Then
				Me.OnEventTimeChanging(value)
				Me.SendPropertyChanging
				Me._EventTime = value
				Me.SendPropertyChanged("EventTime")
				Me.OnEventTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property EventType() As String
		Get
			Return Me._EventType
		End Get
		Set
			If (String.Equals(Me._EventType, value) = false) Then
				Me.OnEventTypeChanging(value)
				Me.SendPropertyChanging
				Me._EventType = value
				Me.SendPropertyChanged("EventType")
				Me.OnEventTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventSequence", DbType:="Decimal(19,0) NOT NULL")>  _
	Public Property EventSequence() As Decimal
		Get
			Return Me._EventSequence
		End Get
		Set
			If ((Me._EventSequence = value)  _
						= false) Then
				Me.OnEventSequenceChanging(value)
				Me.SendPropertyChanging
				Me._EventSequence = value
				Me.SendPropertyChanged("EventSequence")
				Me.OnEventSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventOccurrence", DbType:="Decimal(19,0) NOT NULL")>  _
	Public Property EventOccurrence() As Decimal
		Get
			Return Me._EventOccurrence
		End Get
		Set
			If ((Me._EventOccurrence = value)  _
						= false) Then
				Me.OnEventOccurrenceChanging(value)
				Me.SendPropertyChanging
				Me._EventOccurrence = value
				Me.SendPropertyChanged("EventOccurrence")
				Me.OnEventOccurrenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventCode", DbType:="Int NOT NULL")>  _
	Public Property EventCode() As Integer
		Get
			Return Me._EventCode
		End Get
		Set
			If ((Me._EventCode = value)  _
						= false) Then
				Me.OnEventCodeChanging(value)
				Me.SendPropertyChanging
				Me._EventCode = value
				Me.SendPropertyChanged("EventCode")
				Me.OnEventCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDetailCode", DbType:="Int NOT NULL")>  _
	Public Property EventDetailCode() As Integer
		Get
			Return Me._EventDetailCode
		End Get
		Set
			If ((Me._EventDetailCode = value)  _
						= false) Then
				Me.OnEventDetailCodeChanging(value)
				Me.SendPropertyChanging
				Me._EventDetailCode = value
				Me.SendPropertyChanged("EventDetailCode")
				Me.OnEventDetailCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NVarChar(1024)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationPath", DbType:="NVarChar(256)")>  _
	Public Property ApplicationPath() As String
		Get
			Return Me._ApplicationPath
		End Get
		Set
			If (String.Equals(Me._ApplicationPath, value) = false) Then
				Me.OnApplicationPathChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationPath = value
				Me.SendPropertyChanged("ApplicationPath")
				Me.OnApplicationPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationVirtualPath", DbType:="NVarChar(256)")>  _
	Public Property ApplicationVirtualPath() As String
		Get
			Return Me._ApplicationVirtualPath
		End Get
		Set
			If (String.Equals(Me._ApplicationVirtualPath, value) = false) Then
				Me.OnApplicationVirtualPathChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationVirtualPath = value
				Me.SendPropertyChanged("ApplicationVirtualPath")
				Me.OnApplicationVirtualPathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MachineName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property MachineName() As String
		Get
			Return Me._MachineName
		End Get
		Set
			If (String.Equals(Me._MachineName, value) = false) Then
				Me.OnMachineNameChanging(value)
				Me.SendPropertyChanging
				Me._MachineName = value
				Me.SendPropertyChanged("MachineName")
				Me.OnMachineNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequestUrl", DbType:="NVarChar(1024)")>  _
	Public Property RequestUrl() As String
		Get
			Return Me._RequestUrl
		End Get
		Set
			If (String.Equals(Me._RequestUrl, value) = false) Then
				Me.OnRequestUrlChanging(value)
				Me.SendPropertyChanging
				Me._RequestUrl = value
				Me.SendPropertyChanged("RequestUrl")
				Me.OnRequestUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExceptionType", DbType:="NVarChar(256)")>  _
	Public Property ExceptionType() As String
		Get
			Return Me._ExceptionType
		End Get
		Set
			If (String.Equals(Me._ExceptionType, value) = false) Then
				Me.OnExceptionTypeChanging(value)
				Me.SendPropertyChanging
				Me._ExceptionType = value
				Me.SendPropertyChanged("ExceptionType")
				Me.OnExceptionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Images")>  _
Partial Public Class mcc_Image
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImageID As Integer
	
	Private _ImageUrl As String
	
	Private _Description As String
	
	Private _uuid As String
	
	Private _Tags As String
	
	Private _CreditsName As String
	
	Private _AddedDate As System.Nullable(Of Date)
	
	Private _Type As Integer
	
	Private _Name As String
	
	Private _CreditsUrl As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnuuidChanging(value As String)
    End Sub
    Partial Private Sub OnuuidChanged()
    End Sub
    Partial Private Sub OnTagsChanging(value As String)
    End Sub
    Partial Private Sub OnTagsChanged()
    End Sub
    Partial Private Sub OnCreditsNameChanging(value As String)
    End Sub
    Partial Private Sub OnCreditsNameChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCreditsUrlChanging(value As String)
    End Sub
    Partial Private Sub OnCreditsUrlChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
		Set
			If ((Me._ImageID = value)  _
						= false) Then
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uuid", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property uuid() As String
		Get
			Return Me._uuid
		End Get
		Set
			If (String.Equals(Me._uuid, value) = false) Then
				Me.OnuuidChanging(value)
				Me.SendPropertyChanging
				Me._uuid = value
				Me.SendPropertyChanged("uuid")
				Me.OnuuidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tags", DbType:="NVarChar(512)")>  _
	Public Property Tags() As String
		Get
			Return Me._Tags
		End Get
		Set
			If (String.Equals(Me._Tags, value) = false) Then
				Me.OnTagsChanging(value)
				Me.SendPropertyChanging
				Me._Tags = value
				Me.SendPropertyChanged("Tags")
				Me.OnTagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditsName", DbType:="NVarChar(256)")>  _
	Public Property CreditsName() As String
		Get
			Return Me._CreditsName
		End Get
		Set
			If (String.Equals(Me._CreditsName, value) = false) Then
				Me.OnCreditsNameChanging(value)
				Me.SendPropertyChanging
				Me._CreditsName = value
				Me.SendPropertyChanged("CreditsName")
				Me.OnCreditsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime")>  _
	Public Property AddedDate() As System.Nullable(Of Date)
		Get
			Return Me._AddedDate
		End Get
		Set
			If (Me._AddedDate.Equals(value) = false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int NOT NULL")>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(40)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditsUrl", DbType:="NVarChar(256)")>  _
	Public Property CreditsUrl() As String
		Get
			Return Me._CreditsUrl
		End Get
		Set
			If (String.Equals(Me._CreditsUrl, value) = false) Then
				Me.OnCreditsUrlChanging(value)
				Me.SendPropertyChanging
				Me._CreditsUrl = value
				Me.SendPropertyChanged("CreditsUrl")
				Me.OnCreditsUrlChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_TagsArticles")>  _
Partial Public Class mcc_TagsArticle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TagID As Integer
	
	Private _ArticleID As Integer
	
	Private _mcc_ArticleTag As EntityRef(Of mcc_ArticleTag)
	
	Private _mcc_Article As EntityRef(Of mcc_Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIDChanged()
    End Sub
    Partial Private Sub OnArticleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_ArticleTag = CType(Nothing, EntityRef(Of mcc_ArticleTag))
		Me._mcc_Article = CType(Nothing, EntityRef(Of mcc_Article))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				If Me._mcc_ArticleTag.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTagIDChanging(value)
				Me.SendPropertyChanging
				Me._TagID = value
				Me.SendPropertyChanged("TagID")
				Me.OnTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ArticleID() As Integer
		Get
			Return Me._ArticleID
		End Get
		Set
			If ((Me._ArticleID = value)  _
						= false) Then
				If Me._mcc_Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnArticleIDChanging(value)
				Me.SendPropertyChanging
				Me._ArticleID = value
				Me.SendPropertyChanged("ArticleID")
				Me.OnArticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_ArticleTag_mcc_TagsArticle", Storage:="_mcc_ArticleTag", ThisKey:="TagID", OtherKey:="TagId", IsForeignKey:=true)>  _
	Public Property mcc_ArticleTag() As mcc_ArticleTag
		Get
			Return Me._mcc_ArticleTag.Entity
		End Get
		Set
			Dim previousValue As mcc_ArticleTag = Me._mcc_ArticleTag.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_ArticleTag.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_ArticleTag.Entity = Nothing
					previousValue.mcc_TagsArticles.Remove(Me)
				End If
				Me._mcc_ArticleTag.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_TagsArticles.Add(Me)
					Me._TagID = value.TagId
				Else
					Me._TagID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_ArticleTag")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Article_mcc_TagsArticle", Storage:="_mcc_Article", ThisKey:="ArticleID", OtherKey:="ArticleID", IsForeignKey:=true)>  _
	Public Property mcc_Article() As mcc_Article
		Get
			Return Me._mcc_Article.Entity
		End Get
		Set
			Dim previousValue As mcc_Article = Me._mcc_Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_Article.Entity = Nothing
					previousValue.mcc_TagsArticles.Remove(Me)
				End If
				Me._mcc_Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_TagsArticles.Add(Me)
					Me._ArticleID = value.ArticleID
				Else
					Me._ArticleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_ArticleTags")>  _
Partial Public Class mcc_ArticleTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TagId As Integer
	
	Private _Name As String
	
	Private _Slug As String
	
	Private _mcc_TagsArticles As EntitySet(Of mcc_TagsArticle)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_TagsArticles = New EntitySet(Of mcc_TagsArticle)(AddressOf Me.attach_mcc_TagsArticles, AddressOf Me.detach_mcc_TagsArticles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TagId() As Integer
		Get
			Return Me._TagId
		End Get
		Set
			If ((Me._TagId = value)  _
						= false) Then
				Me.OnTagIdChanging(value)
				Me.SendPropertyChanging
				Me._TagId = value
				Me.SendPropertyChanged("TagId")
				Me.OnTagIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_ArticleTag_mcc_TagsArticle", Storage:="_mcc_TagsArticles", ThisKey:="TagId", OtherKey:="TagID")>  _
	Public Property mcc_TagsArticles() As EntitySet(Of mcc_TagsArticle)
		Get
			Return Me._mcc_TagsArticles
		End Get
		Set
			Me._mcc_TagsArticles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_TagsArticles(ByVal entity As mcc_TagsArticle)
		Me.SendPropertyChanging
		entity.mcc_ArticleTag = Me
	End Sub
	
	Private Sub detach_mcc_TagsArticles(ByVal entity As mcc_TagsArticle)
		Me.SendPropertyChanging
		entity.mcc_ArticleTag = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_UserAnswerComments")>  _
Partial Public Class mcc_UserAnswerComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserAnswerCommentId As Integer
	
	Private _Body As String
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _UserAnswerId As Integer
	
	Private _mcc_UserAnswer As EntityRef(Of mcc_UserAnswer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserAnswerCommentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserAnswerCommentIdChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnUserAnswerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserAnswerIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_UserAnswer = CType(Nothing, EntityRef(Of mcc_UserAnswer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAnswerCommentId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserAnswerCommentId() As Integer
		Get
			Return Me._UserAnswerCommentId
		End Get
		Set
			If ((Me._UserAnswerCommentId = value)  _
						= false) Then
				Me.OnUserAnswerCommentIdChanging(value)
				Me.SendPropertyChanging
				Me._UserAnswerCommentId = value
				Me.SendPropertyChanged("UserAnswerCommentId")
				Me.OnUserAnswerCommentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAnswerId", DbType:="Int NOT NULL")>  _
	Public Property UserAnswerId() As Integer
		Get
			Return Me._UserAnswerId
		End Get
		Set
			If ((Me._UserAnswerId = value)  _
						= false) Then
				If Me._mcc_UserAnswer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserAnswerIdChanging(value)
				Me.SendPropertyChanging
				Me._UserAnswerId = value
				Me.SendPropertyChanged("UserAnswerId")
				Me.OnUserAnswerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_UserAnswer_mcc_UserAnswerComment", Storage:="_mcc_UserAnswer", ThisKey:="UserAnswerId", OtherKey:="UserAnswerId", IsForeignKey:=true)>  _
	Public Property mcc_UserAnswer() As mcc_UserAnswer
		Get
			Return Me._mcc_UserAnswer.Entity
		End Get
		Set
			Dim previousValue As mcc_UserAnswer = Me._mcc_UserAnswer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_UserAnswer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_UserAnswer.Entity = Nothing
					previousValue.mcc_UserAnswerComments.Remove(Me)
				End If
				Me._mcc_UserAnswer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_UserAnswerComments.Add(Me)
					Me._UserAnswerId = value.UserAnswerId
				Else
					Me._UserAnswerId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_UserAnswer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_UserQuestionComments")>  _
Partial Public Class mcc_UserQuestionComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserQuestionCommentId As Integer
	
	Private _Body As String
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _UserQuestionId As Integer
	
	Private _mcc_UserQuestion As EntityRef(Of mcc_UserQuestion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserQuestionCommentIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserQuestionCommentIdChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnUserQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserQuestionIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_UserQuestion = CType(Nothing, EntityRef(Of mcc_UserQuestion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserQuestionCommentId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserQuestionCommentId() As Integer
		Get
			Return Me._UserQuestionCommentId
		End Get
		Set
			If ((Me._UserQuestionCommentId = value)  _
						= false) Then
				Me.OnUserQuestionCommentIdChanging(value)
				Me.SendPropertyChanging
				Me._UserQuestionCommentId = value
				Me.SendPropertyChanged("UserQuestionCommentId")
				Me.OnUserQuestionCommentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserQuestionId", DbType:="Int NOT NULL")>  _
	Public Property UserQuestionId() As Integer
		Get
			Return Me._UserQuestionId
		End Get
		Set
			If ((Me._UserQuestionId = value)  _
						= false) Then
				If Me._mcc_UserQuestion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserQuestionIdChanging(value)
				Me.SendPropertyChanging
				Me._UserQuestionId = value
				Me.SendPropertyChanged("UserQuestionId")
				Me.OnUserQuestionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_UserQuestion_mcc_UserQuestionComment", Storage:="_mcc_UserQuestion", ThisKey:="UserQuestionId", OtherKey:="UserQuestionId", IsForeignKey:=true)>  _
	Public Property mcc_UserQuestion() As mcc_UserQuestion
		Get
			Return Me._mcc_UserQuestion.Entity
		End Get
		Set
			Dim previousValue As mcc_UserQuestion = Me._mcc_UserQuestion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_UserQuestion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_UserQuestion.Entity = Nothing
					previousValue.mcc_UserQuestionComments.Remove(Me)
				End If
				Me._mcc_UserQuestion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_UserQuestionComments.Add(Me)
					Me._UserQuestionId = value.UserQuestionId
				Else
					Me._UserQuestionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_UserQuestion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_UsersAnswer_Votes")>  _
Partial Public Class mcc_UsersAnswer_Vote
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserAnswerId As Integer
	
	Private _UserId As String
	
	Private _Helpful As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserAnswerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserAnswerIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnHelpfulChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHelpfulChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAnswerId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserAnswerId() As Integer
		Get
			Return Me._UserAnswerId
		End Get
		Set
			If ((Me._UserAnswerId = value)  _
						= false) Then
				Me.OnUserAnswerIdChanging(value)
				Me.SendPropertyChanging
				Me._UserAnswerId = value
				Me.SendPropertyChanged("UserAnswerId")
				Me.OnUserAnswerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Helpful", DbType:="Bit NOT NULL")>  _
	Public Property Helpful() As Boolean
		Get
			Return Me._Helpful
		End Get
		Set
			If ((Me._Helpful = value)  _
						= false) Then
				Me.OnHelpfulChanging(value)
				Me.SendPropertyChanging
				Me._Helpful = value
				Me.SendPropertyChanged("Helpful")
				Me.OnHelpfulChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_UsersQuestion_Votes")>  _
Partial Public Class mcc_UsersQuestion_Vote
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserQuestionId As Integer
	
	Private _UserId As String
	
	Private _Helpful As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserQuestionIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnHelpfulChanging(value As Boolean)
    End Sub
    Partial Private Sub OnHelpfulChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserQuestionId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserQuestionId() As Integer
		Get
			Return Me._UserQuestionId
		End Get
		Set
			If ((Me._UserQuestionId = value)  _
						= false) Then
				Me.OnUserQuestionIdChanging(value)
				Me.SendPropertyChanging
				Me._UserQuestionId = value
				Me.SendPropertyChanged("UserQuestionId")
				Me.OnUserQuestionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Helpful", DbType:="Bit NOT NULL")>  _
	Public Property Helpful() As Boolean
		Get
			Return Me._Helpful
		End Get
		Set
			If ((Me._Helpful = value)  _
						= false) Then
				Me.OnHelpfulChanging(value)
				Me.SendPropertyChanging
				Me._Helpful = value
				Me.SendPropertyChanged("Helpful")
				Me.OnHelpfulChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Videos")>  _
Partial Public Class mcc_Video
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VideoId As Integer
	
	Private _Name As String
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _Approved As Boolean
	
	Private _Listed As Boolean
	
	Private _CommentsEnabled As Boolean
	
	Private _ViewCount As Integer
	
	Private _Votes As Integer
	
	Private _TotalRating As Integer
	
	Private _VideoUrl As String
	
	Private _Abstract As String
	
	Private _OnlyForMembers As Boolean
	
	Private _Slug As String
	
	Private _Tags As String
	
	Private _Duration As Double
	
	Private _mcc_CategoriesVideos As EntitySet(Of mcc_CategoriesVideo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVideoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVideoIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnListedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnListedChanged()
    End Sub
    Partial Private Sub OnCommentsEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCommentsEnabledChanged()
    End Sub
    Partial Private Sub OnViewCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewCountChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As Integer)
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    Partial Private Sub OnTotalRatingChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotalRatingChanged()
    End Sub
    Partial Private Sub OnVideoUrlChanging(value As String)
    End Sub
    Partial Private Sub OnVideoUrlChanged()
    End Sub
    Partial Private Sub OnAbstractChanging(value As String)
    End Sub
    Partial Private Sub OnAbstractChanged()
    End Sub
    Partial Private Sub OnOnlyForMembersChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOnlyForMembersChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnTagsChanging(value As String)
    End Sub
    Partial Private Sub OnTagsChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As Double)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_CategoriesVideos = New EntitySet(Of mcc_CategoriesVideo)(AddressOf Me.attach_mcc_CategoriesVideos, AddressOf Me.detach_mcc_CategoriesVideos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VideoId() As Integer
		Get
			Return Me._VideoId
		End Get
		Set
			If ((Me._VideoId = value)  _
						= false) Then
				Me.OnVideoIdChanging(value)
				Me.SendPropertyChanging
				Me._VideoId = value
				Me.SendPropertyChanged("VideoId")
				Me.OnVideoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Listed", DbType:="Bit NOT NULL")>  _
	Public Property Listed() As Boolean
		Get
			Return Me._Listed
		End Get
		Set
			If ((Me._Listed = value)  _
						= false) Then
				Me.OnListedChanging(value)
				Me.SendPropertyChanging
				Me._Listed = value
				Me.SendPropertyChanged("Listed")
				Me.OnListedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentsEnabled", DbType:="Bit NOT NULL")>  _
	Public Property CommentsEnabled() As Boolean
		Get
			Return Me._CommentsEnabled
		End Get
		Set
			If ((Me._CommentsEnabled = value)  _
						= false) Then
				Me.OnCommentsEnabledChanging(value)
				Me.SendPropertyChanging
				Me._CommentsEnabled = value
				Me.SendPropertyChanged("CommentsEnabled")
				Me.OnCommentsEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewCount", DbType:="Int NOT NULL")>  _
	Public Property ViewCount() As Integer
		Get
			Return Me._ViewCount
		End Get
		Set
			If ((Me._ViewCount = value)  _
						= false) Then
				Me.OnViewCountChanging(value)
				Me.SendPropertyChanging
				Me._ViewCount = value
				Me.SendPropertyChanged("ViewCount")
				Me.OnViewCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int NOT NULL")>  _
	Public Property Votes() As Integer
		Get
			Return Me._Votes
		End Get
		Set
			If ((Me._Votes = value)  _
						= false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalRating", DbType:="Int NOT NULL")>  _
	Public Property TotalRating() As Integer
		Get
			Return Me._TotalRating
		End Get
		Set
			If ((Me._TotalRating = value)  _
						= false) Then
				Me.OnTotalRatingChanging(value)
				Me.SendPropertyChanging
				Me._TotalRating = value
				Me.SendPropertyChanged("TotalRating")
				Me.OnTotalRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoUrl", DbType:="NVarChar(256)")>  _
	Public Property VideoUrl() As String
		Get
			Return Me._VideoUrl
		End Get
		Set
			If (String.Equals(Me._VideoUrl, value) = false) Then
				Me.OnVideoUrlChanging(value)
				Me.SendPropertyChanging
				Me._VideoUrl = value
				Me.SendPropertyChanged("VideoUrl")
				Me.OnVideoUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abstract", DbType:="NVarChar(4000)")>  _
	Public Property Abstract() As String
		Get
			Return Me._Abstract
		End Get
		Set
			If (String.Equals(Me._Abstract, value) = false) Then
				Me.OnAbstractChanging(value)
				Me.SendPropertyChanging
				Me._Abstract = value
				Me.SendPropertyChanged("Abstract")
				Me.OnAbstractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnlyForMembers", DbType:="Bit NOT NULL")>  _
	Public Property OnlyForMembers() As Boolean
		Get
			Return Me._OnlyForMembers
		End Get
		Set
			If ((Me._OnlyForMembers = value)  _
						= false) Then
				Me.OnOnlyForMembersChanging(value)
				Me.SendPropertyChanging
				Me._OnlyForMembers = value
				Me.SendPropertyChanged("OnlyForMembers")
				Me.OnOnlyForMembersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256)")>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tags", DbType:="NVarChar(256)")>  _
	Public Property Tags() As String
		Get
			Return Me._Tags
		End Get
		Set
			If (String.Equals(Me._Tags, value) = false) Then
				Me.OnTagsChanging(value)
				Me.SendPropertyChanging
				Me._Tags = value
				Me.SendPropertyChanged("Tags")
				Me.OnTagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="Float NOT NULL")>  _
	Public Property Duration() As Double
		Get
			Return Me._Duration
		End Get
		Set
			If ((Me._Duration = value)  _
						= false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Video_mcc_CategoriesVideo", Storage:="_mcc_CategoriesVideos", ThisKey:="VideoId", OtherKey:="VideoId")>  _
	Public Property mcc_CategoriesVideos() As EntitySet(Of mcc_CategoriesVideo)
		Get
			Return Me._mcc_CategoriesVideos
		End Get
		Set
			Me._mcc_CategoriesVideos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_CategoriesVideos(ByVal entity As mcc_CategoriesVideo)
		Me.SendPropertyChanging
		entity.mcc_Video = Me
	End Sub
	
	Private Sub detach_mcc_CategoriesVideos(ByVal entity As mcc_CategoriesVideo)
		Me.SendPropertyChanging
		entity.mcc_Video = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Ads")>  _
Partial Public Class mcc_Ad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AdId As Integer
	
	Private _AddedDate As Date
	
	Private _Addedby As String
	
	Private _Body As String
	
	Private _Approved As Boolean
	
	Private _Description As String
	
	Private _Keywords As String
	
	Private _Title As String
	
	Private _Type As Integer
	
	Private _ZoneId As Integer
	
	Private _AdvertizerId As Integer
	
	Private _Task As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAdIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedbyChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeywordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordsChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnZoneIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneIdChanged()
    End Sub
    Partial Private Sub OnAdvertizerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdvertizerIdChanged()
    End Sub
    Partial Private Sub OnTaskChanging(value As Integer)
    End Sub
    Partial Private Sub OnTaskChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AdId() As Integer
		Get
			Return Me._AdId
		End Get
		Set
			If ((Me._AdId = value)  _
						= false) Then
				Me.OnAdIdChanging(value)
				Me.SendPropertyChanging
				Me._AdId = value
				Me.SendPropertyChanged("AdId")
				Me.OnAdIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Addedby", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Addedby() As String
		Get
			Return Me._Addedby
		End Get
		Set
			If (String.Equals(Me._Addedby, value) = false) Then
				Me.OnAddedbyChanging(value)
				Me.SendPropertyChanging
				Me._Addedby = value
				Me.SendPropertyChanged("Addedby")
				Me.OnAddedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(512) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keywords", DbType:="NVarChar(256)")>  _
	Public Property Keywords() As String
		Get
			Return Me._Keywords
		End Get
		Set
			If (String.Equals(Me._Keywords, value) = false) Then
				Me.OnKeywordsChanging(value)
				Me.SendPropertyChanging
				Me._Keywords = value
				Me.SendPropertyChanged("Keywords")
				Me.OnKeywordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="Int NOT NULL")>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneId", DbType:="Int NOT NULL")>  _
	Public Property ZoneId() As Integer
		Get
			Return Me._ZoneId
		End Get
		Set
			If ((Me._ZoneId = value)  _
						= false) Then
				Me.OnZoneIdChanging(value)
				Me.SendPropertyChanging
				Me._ZoneId = value
				Me.SendPropertyChanged("ZoneId")
				Me.OnZoneIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdvertizerId", DbType:="Int NOT NULL")>  _
	Public Property AdvertizerId() As Integer
		Get
			Return Me._AdvertizerId
		End Get
		Set
			If ((Me._AdvertizerId = value)  _
						= false) Then
				Me.OnAdvertizerIdChanging(value)
				Me.SendPropertyChanging
				Me._AdvertizerId = value
				Me.SendPropertyChanged("AdvertizerId")
				Me.OnAdvertizerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Task", DbType:="Int NOT NULL")>  _
	Public Property Task() As Integer
		Get
			Return Me._Task
		End Get
		Set
			If ((Me._Task = value)  _
						= false) Then
				Me.OnTaskChanging(value)
				Me.SendPropertyChanging
				Me._Task = value
				Me.SendPropertyChanged("Task")
				Me.OnTaskChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_VideoTags")>  _
Partial Public Class mcc_VideoTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VideoTagId As Integer
	
	Private _Name As String
	
	Private _Slug As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVideoTagIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnVideoTagIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoTagId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VideoTagId() As Integer
		Get
			Return Me._VideoTagId
		End Get
		Set
			If ((Me._VideoTagId = value)  _
						= false) Then
				Me.OnVideoTagIdChanging(value)
				Me.SendPropertyChanging
				Me._VideoTagId = value
				Me.SendPropertyChanged("VideoTagId")
				Me.OnVideoTagIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_ImageTags")>  _
Partial Public Class mcc_ImageTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImageTagId As Integer
	
	Private _Name As String
	
	Private _Slug As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImageTagIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageTagIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageTagId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ImageTagId() As Integer
		Get
			Return Me._ImageTagId
		End Get
		Set
			If ((Me._ImageTagId = value)  _
						= false) Then
				Me.OnImageTagIdChanging(value)
				Me.SendPropertyChanging
				Me._ImageTagId = value
				Me.SendPropertyChanged("ImageTagId")
				Me.OnImageTagIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_ResetCodes")>  _
Partial Public Class mcc_ResetCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _Usercode As String
	
	Private _AddedDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUsercodeChanging(value As String)
    End Sub
    Partial Private Sub OnUsercodeChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Usercode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Usercode() As String
		Get
			Return Me._Usercode
		End Get
		Set
			If (String.Equals(Me._Usercode, value) = false) Then
				Me.OnUsercodeChanging(value)
				Me.SendPropertyChanging
				Me._Usercode = value
				Me.SendPropertyChanged("Usercode")
				Me.OnUsercodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_TagsImages")>  _
Partial Public Class mcc_TagsImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TagID As Integer
	
	Private _ImageID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTagIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIDChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				Me.OnTagIDChanging(value)
				Me.SendPropertyChanging
				Me._TagID = value
				Me.SendPropertyChanged("TagID")
				Me.OnTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
		Set
			If ((Me._ImageID = value)  _
						= false) Then
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Articles")>  _
Partial Public Class mcc_Article
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ArticleID As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _City As String
	
	Private _State As String
	
	Private _Country As String
	
	Private _ReleaseDate As System.Nullable(Of Date)
	
	Private _ExpireDate As System.Nullable(Of Date)
	
	Private _Approved As Boolean
	
	Private _Listed As Boolean
	
	Private _CommentsEnabled As Boolean
	
	Private _ViewCount As Integer
	
	Private _Votes As Integer
	
	Private _TotalRating As Integer
	
	Private _Body As String
	
	Private _Abstract As String
	
	Private _OnlyForMembers As Boolean
	
	Private _ImageNewsUrl As String
	
	Private _ImageIconUrl As String
	
	Private _Tags As String
	
	Private _Slug As String
	
	Private _Status As Integer
	
	Private _VideoId As System.Nullable(Of Integer)
	
	Private _PollId As System.Nullable(Of Integer)
	
	Private _ImageID As System.Nullable(Of Integer)
	
	Private _mcc_ArticleCategories As EntitySet(Of mcc_ArticleCategory)
	
	Private _mcc_Comments As EntitySet(Of mcc_Comment)
	
	Private _mcc_TagsArticles As EntitySet(Of mcc_TagsArticle)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnArticleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnArticleIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnReleaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReleaseDateChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnListedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnListedChanged()
    End Sub
    Partial Private Sub OnCommentsEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCommentsEnabledChanged()
    End Sub
    Partial Private Sub OnViewCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewCountChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As Integer)
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    Partial Private Sub OnTotalRatingChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotalRatingChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnAbstractChanging(value As String)
    End Sub
    Partial Private Sub OnAbstractChanged()
    End Sub
    Partial Private Sub OnOnlyForMembersChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOnlyForMembersChanged()
    End Sub
    Partial Private Sub OnImageNewsUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageNewsUrlChanged()
    End Sub
    Partial Private Sub OnImageIconUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageIconUrlChanged()
    End Sub
    Partial Private Sub OnTagsChanging(value As String)
    End Sub
    Partial Private Sub OnTagsChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnVideoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVideoIdChanged()
    End Sub
    Partial Private Sub OnPollIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPollIdChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_ArticleCategories = New EntitySet(Of mcc_ArticleCategory)(AddressOf Me.attach_mcc_ArticleCategories, AddressOf Me.detach_mcc_ArticleCategories)
		Me._mcc_Comments = New EntitySet(Of mcc_Comment)(AddressOf Me.attach_mcc_Comments, AddressOf Me.detach_mcc_Comments)
		Me._mcc_TagsArticles = New EntitySet(Of mcc_TagsArticle)(AddressOf Me.attach_mcc_TagsArticles, AddressOf Me.detach_mcc_TagsArticles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ArticleID() As Integer
		Get
			Return Me._ArticleID
		End Get
		Set
			If ((Me._ArticleID = value)  _
						= false) Then
				Me.OnArticleIDChanging(value)
				Me.SendPropertyChanging
				Me._ArticleID = value
				Me.SendPropertyChanged("ArticleID")
				Me.OnArticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(256)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(256)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(256)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReleaseDate", DbType:="DateTime")>  _
	Public Property ReleaseDate() As System.Nullable(Of Date)
		Get
			Return Me._ReleaseDate
		End Get
		Set
			If (Me._ReleaseDate.Equals(value) = false) Then
				Me.OnReleaseDateChanging(value)
				Me.SendPropertyChanging
				Me._ReleaseDate = value
				Me.SendPropertyChanged("ReleaseDate")
				Me.OnReleaseDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="DateTime")>  _
	Public Property ExpireDate() As System.Nullable(Of Date)
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (Me._ExpireDate.Equals(value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Listed", DbType:="Bit NOT NULL")>  _
	Public Property Listed() As Boolean
		Get
			Return Me._Listed
		End Get
		Set
			If ((Me._Listed = value)  _
						= false) Then
				Me.OnListedChanging(value)
				Me.SendPropertyChanging
				Me._Listed = value
				Me.SendPropertyChanged("Listed")
				Me.OnListedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentsEnabled", DbType:="Bit NOT NULL")>  _
	Public Property CommentsEnabled() As Boolean
		Get
			Return Me._CommentsEnabled
		End Get
		Set
			If ((Me._CommentsEnabled = value)  _
						= false) Then
				Me.OnCommentsEnabledChanging(value)
				Me.SendPropertyChanging
				Me._CommentsEnabled = value
				Me.SendPropertyChanged("CommentsEnabled")
				Me.OnCommentsEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewCount", DbType:="Int NOT NULL")>  _
	Public Property ViewCount() As Integer
		Get
			Return Me._ViewCount
		End Get
		Set
			If ((Me._ViewCount = value)  _
						= false) Then
				Me.OnViewCountChanging(value)
				Me.SendPropertyChanging
				Me._ViewCount = value
				Me.SendPropertyChanged("ViewCount")
				Me.OnViewCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int NOT NULL")>  _
	Public Property Votes() As Integer
		Get
			Return Me._Votes
		End Get
		Set
			If ((Me._Votes = value)  _
						= false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalRating", DbType:="Int NOT NULL")>  _
	Public Property TotalRating() As Integer
		Get
			Return Me._TotalRating
		End Get
		Set
			If ((Me._TotalRating = value)  _
						= false) Then
				Me.OnTotalRatingChanging(value)
				Me.SendPropertyChanging
				Me._TotalRating = value
				Me.SendPropertyChanged("TotalRating")
				Me.OnTotalRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abstract", DbType:="NVarChar(4000)")>  _
	Public Property Abstract() As String
		Get
			Return Me._Abstract
		End Get
		Set
			If (String.Equals(Me._Abstract, value) = false) Then
				Me.OnAbstractChanging(value)
				Me.SendPropertyChanging
				Me._Abstract = value
				Me.SendPropertyChanged("Abstract")
				Me.OnAbstractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnlyForMembers", DbType:="Bit NOT NULL")>  _
	Public Property OnlyForMembers() As Boolean
		Get
			Return Me._OnlyForMembers
		End Get
		Set
			If ((Me._OnlyForMembers = value)  _
						= false) Then
				Me.OnOnlyForMembersChanging(value)
				Me.SendPropertyChanging
				Me._OnlyForMembers = value
				Me.SendPropertyChanged("OnlyForMembers")
				Me.OnOnlyForMembersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNewsUrl", DbType:="NVarChar(256)")>  _
	Public Property ImageNewsUrl() As String
		Get
			Return Me._ImageNewsUrl
		End Get
		Set
			If (String.Equals(Me._ImageNewsUrl, value) = false) Then
				Me.OnImageNewsUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageNewsUrl = value
				Me.SendPropertyChanged("ImageNewsUrl")
				Me.OnImageNewsUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageIconUrl", DbType:="NVarChar(256)")>  _
	Public Property ImageIconUrl() As String
		Get
			Return Me._ImageIconUrl
		End Get
		Set
			If (String.Equals(Me._ImageIconUrl, value) = false) Then
				Me.OnImageIconUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageIconUrl = value
				Me.SendPropertyChanged("ImageIconUrl")
				Me.OnImageIconUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tags", DbType:="NVarChar(256)")>  _
	Public Property Tags() As String
		Get
			Return Me._Tags
		End Get
		Set
			If (String.Equals(Me._Tags, value) = false) Then
				Me.OnTagsChanging(value)
				Me.SendPropertyChanging
				Me._Tags = value
				Me.SendPropertyChanged("Tags")
				Me.OnTagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256)")>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoId", DbType:="Int")>  _
	Public Property VideoId() As System.Nullable(Of Integer)
		Get
			Return Me._VideoId
		End Get
		Set
			If (Me._VideoId.Equals(value) = false) Then
				Me.OnVideoIdChanging(value)
				Me.SendPropertyChanging
				Me._VideoId = value
				Me.SendPropertyChanged("VideoId")
				Me.OnVideoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PollId", DbType:="Int")>  _
	Public Property PollId() As System.Nullable(Of Integer)
		Get
			Return Me._PollId
		End Get
		Set
			If (Me._PollId.Equals(value) = false) Then
				Me.OnPollIdChanging(value)
				Me.SendPropertyChanging
				Me._PollId = value
				Me.SendPropertyChanged("PollId")
				Me.OnPollIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int")>  _
	Public Property ImageID() As System.Nullable(Of Integer)
		Get
			Return Me._ImageID
		End Get
		Set
			If (Me._ImageID.Equals(value) = false) Then
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Article_mcc_ArticleCategory", Storage:="_mcc_ArticleCategories", ThisKey:="ArticleID", OtherKey:="ArticleId")>  _
	Public Property mcc_ArticleCategories() As EntitySet(Of mcc_ArticleCategory)
		Get
			Return Me._mcc_ArticleCategories
		End Get
		Set
			Me._mcc_ArticleCategories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Article_mcc_Comment", Storage:="_mcc_Comments", ThisKey:="ArticleID", OtherKey:="ArticleID")>  _
	Public Property mcc_Comments() As EntitySet(Of mcc_Comment)
		Get
			Return Me._mcc_Comments
		End Get
		Set
			Me._mcc_Comments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_Article_mcc_TagsArticle", Storage:="_mcc_TagsArticles", ThisKey:="ArticleID", OtherKey:="ArticleID")>  _
	Public Property mcc_TagsArticles() As EntitySet(Of mcc_TagsArticle)
		Get
			Return Me._mcc_TagsArticles
		End Get
		Set
			Me._mcc_TagsArticles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_ArticleCategories(ByVal entity As mcc_ArticleCategory)
		Me.SendPropertyChanging
		entity.mcc_Article = Me
	End Sub
	
	Private Sub detach_mcc_ArticleCategories(ByVal entity As mcc_ArticleCategory)
		Me.SendPropertyChanging
		entity.mcc_Article = Nothing
	End Sub
	
	Private Sub attach_mcc_Comments(ByVal entity As mcc_Comment)
		Me.SendPropertyChanging
		entity.mcc_Article = Me
	End Sub
	
	Private Sub detach_mcc_Comments(ByVal entity As mcc_Comment)
		Me.SendPropertyChanging
		entity.mcc_Article = Nothing
	End Sub
	
	Private Sub attach_mcc_TagsArticles(ByVal entity As mcc_TagsArticle)
		Me.SendPropertyChanging
		entity.mcc_Article = Me
	End Sub
	
	Private Sub detach_mcc_TagsArticles(ByVal entity As mcc_TagsArticle)
		Me.SendPropertyChanging
		entity.mcc_Article = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_UserAnswers")>  _
Partial Public Class mcc_UserAnswer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserAnswerId As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Body As String
	
	Private _RelevanceFactor As System.Nullable(Of Integer)
	
	Private _UserQuestionId As Integer
	
	Private _Votes As Integer
	
	Private _mcc_UserAnswerComments As EntitySet(Of mcc_UserAnswerComment)
	
	Private _mcc_UserQuestion As EntityRef(Of mcc_UserQuestion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserAnswerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserAnswerIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnRelevanceFactorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRelevanceFactorChanged()
    End Sub
    Partial Private Sub OnUserQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserQuestionIdChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As Integer)
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_UserAnswerComments = New EntitySet(Of mcc_UserAnswerComment)(AddressOf Me.attach_mcc_UserAnswerComments, AddressOf Me.detach_mcc_UserAnswerComments)
		Me._mcc_UserQuestion = CType(Nothing, EntityRef(Of mcc_UserQuestion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAnswerId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserAnswerId() As Integer
		Get
			Return Me._UserAnswerId
		End Get
		Set
			If ((Me._UserAnswerId = value)  _
						= false) Then
				Me.OnUserAnswerIdChanging(value)
				Me.SendPropertyChanging
				Me._UserAnswerId = value
				Me.SendPropertyChanged("UserAnswerId")
				Me.OnUserAnswerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelevanceFactor", DbType:="Int")>  _
	Public Property RelevanceFactor() As System.Nullable(Of Integer)
		Get
			Return Me._RelevanceFactor
		End Get
		Set
			If (Me._RelevanceFactor.Equals(value) = false) Then
				Me.OnRelevanceFactorChanging(value)
				Me.SendPropertyChanging
				Me._RelevanceFactor = value
				Me.SendPropertyChanged("RelevanceFactor")
				Me.OnRelevanceFactorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserQuestionId", DbType:="Int NOT NULL")>  _
	Public Property UserQuestionId() As Integer
		Get
			Return Me._UserQuestionId
		End Get
		Set
			If ((Me._UserQuestionId = value)  _
						= false) Then
				If Me._mcc_UserQuestion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserQuestionIdChanging(value)
				Me.SendPropertyChanging
				Me._UserQuestionId = value
				Me.SendPropertyChanged("UserQuestionId")
				Me.OnUserQuestionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int NOT NULL")>  _
	Public Property Votes() As Integer
		Get
			Return Me._Votes
		End Get
		Set
			If ((Me._Votes = value)  _
						= false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_UserAnswer_mcc_UserAnswerComment", Storage:="_mcc_UserAnswerComments", ThisKey:="UserAnswerId", OtherKey:="UserAnswerId")>  _
	Public Property mcc_UserAnswerComments() As EntitySet(Of mcc_UserAnswerComment)
		Get
			Return Me._mcc_UserAnswerComments
		End Get
		Set
			Me._mcc_UserAnswerComments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_UserQuestion_mcc_UserAnswer", Storage:="_mcc_UserQuestion", ThisKey:="UserQuestionId", OtherKey:="UserQuestionId", IsForeignKey:=true)>  _
	Public Property mcc_UserQuestion() As mcc_UserQuestion
		Get
			Return Me._mcc_UserQuestion.Entity
		End Get
		Set
			Dim previousValue As mcc_UserQuestion = Me._mcc_UserQuestion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mcc_UserQuestion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mcc_UserQuestion.Entity = Nothing
					previousValue.mcc_UserAnswers.Remove(Me)
				End If
				Me._mcc_UserQuestion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mcc_UserAnswers.Add(Me)
					Me._UserQuestionId = value.UserQuestionId
				Else
					Me._UserQuestionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mcc_UserQuestion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_UserAnswerComments(ByVal entity As mcc_UserAnswerComment)
		Me.SendPropertyChanging
		entity.mcc_UserAnswer = Me
	End Sub
	
	Private Sub detach_mcc_UserAnswerComments(ByVal entity As mcc_UserAnswerComment)
		Me.SendPropertyChanging
		entity.mcc_UserAnswer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_UserQuestions")>  _
Partial Public Class mcc_UserQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserQuestionId As Integer
	
	Private _AddedDate As Date
	
	Private _Addedby As String
	
	Private _Body As String
	
	Private _BestUserAnswerId As Integer
	
	Private _Title As String
	
	Private _Slug As String
	
	Private _Votes As Integer
	
	Private _Views As Integer
	
	Private _ActivityNotification As System.Nullable(Of Boolean)
	
	Private _mcc_UserQuestionComments As EntitySet(Of mcc_UserQuestionComment)
	
	Private _mcc_UserAnswers As EntitySet(Of mcc_UserAnswer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserQuestionIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedbyChanging(value As String)
    End Sub
    Partial Private Sub OnAddedbyChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnBestUserAnswerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBestUserAnswerIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As Integer)
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    Partial Private Sub OnViewsChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewsChanged()
    End Sub
    Partial Private Sub OnActivityNotificationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActivityNotificationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mcc_UserQuestionComments = New EntitySet(Of mcc_UserQuestionComment)(AddressOf Me.attach_mcc_UserQuestionComments, AddressOf Me.detach_mcc_UserQuestionComments)
		Me._mcc_UserAnswers = New EntitySet(Of mcc_UserAnswer)(AddressOf Me.attach_mcc_UserAnswers, AddressOf Me.detach_mcc_UserAnswers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserQuestionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserQuestionId() As Integer
		Get
			Return Me._UserQuestionId
		End Get
		Set
			If ((Me._UserQuestionId = value)  _
						= false) Then
				Me.OnUserQuestionIdChanging(value)
				Me.SendPropertyChanging
				Me._UserQuestionId = value
				Me.SendPropertyChanged("UserQuestionId")
				Me.OnUserQuestionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Addedby", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Addedby() As String
		Get
			Return Me._Addedby
		End Get
		Set
			If (String.Equals(Me._Addedby, value) = false) Then
				Me.OnAddedbyChanging(value)
				Me.SendPropertyChanging
				Me._Addedby = value
				Me.SendPropertyChanged("Addedby")
				Me.OnAddedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BestUserAnswerId", DbType:="Int NOT NULL")>  _
	Public Property BestUserAnswerId() As Integer
		Get
			Return Me._BestUserAnswerId
		End Get
		Set
			If ((Me._BestUserAnswerId = value)  _
						= false) Then
				Me.OnBestUserAnswerIdChanging(value)
				Me.SendPropertyChanging
				Me._BestUserAnswerId = value
				Me.SendPropertyChanged("BestUserAnswerId")
				Me.OnBestUserAnswerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(512) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(512) NOT NULL", CanBeNull:=false)>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int NOT NULL")>  _
	Public Property Votes() As Integer
		Get
			Return Me._Votes
		End Get
		Set
			If ((Me._Votes = value)  _
						= false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Views", DbType:="Int NOT NULL")>  _
	Public Property Views() As Integer
		Get
			Return Me._Views
		End Get
		Set
			If ((Me._Views = value)  _
						= false) Then
				Me.OnViewsChanging(value)
				Me.SendPropertyChanging
				Me._Views = value
				Me.SendPropertyChanged("Views")
				Me.OnViewsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityNotification", DbType:="Bit")>  _
	Public Property ActivityNotification() As System.Nullable(Of Boolean)
		Get
			Return Me._ActivityNotification
		End Get
		Set
			If (Me._ActivityNotification.Equals(value) = false) Then
				Me.OnActivityNotificationChanging(value)
				Me.SendPropertyChanging
				Me._ActivityNotification = value
				Me.SendPropertyChanged("ActivityNotification")
				Me.OnActivityNotificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_UserQuestion_mcc_UserQuestionComment", Storage:="_mcc_UserQuestionComments", ThisKey:="UserQuestionId", OtherKey:="UserQuestionId")>  _
	Public Property mcc_UserQuestionComments() As EntitySet(Of mcc_UserQuestionComment)
		Get
			Return Me._mcc_UserQuestionComments
		End Get
		Set
			Me._mcc_UserQuestionComments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="mcc_UserQuestion_mcc_UserAnswer", Storage:="_mcc_UserAnswers", ThisKey:="UserQuestionId", OtherKey:="UserQuestionId")>  _
	Public Property mcc_UserAnswers() As EntitySet(Of mcc_UserAnswer)
		Get
			Return Me._mcc_UserAnswers
		End Get
		Set
			Me._mcc_UserAnswers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mcc_UserQuestionComments(ByVal entity As mcc_UserQuestionComment)
		Me.SendPropertyChanging
		entity.mcc_UserQuestion = Me
	End Sub
	
	Private Sub detach_mcc_UserQuestionComments(ByVal entity As mcc_UserQuestionComment)
		Me.SendPropertyChanging
		entity.mcc_UserQuestion = Nothing
	End Sub
	
	Private Sub attach_mcc_UserAnswers(ByVal entity As mcc_UserAnswer)
		Me.SendPropertyChanging
		entity.mcc_UserQuestion = Me
	End Sub
	
	Private Sub detach_mcc_UserAnswers(ByVal entity As mcc_UserAnswer)
		Me.SendPropertyChanging
		entity.mcc_UserQuestion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_WikiPage")>  _
Partial Public Class mcc_WikiPage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WikiPageId As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _Description As String
	
	Private _Body As String
	
	Private _LastEditionDate As Date
	
	Private _LastEditedby As String
	
	Private _ParentWikiId As Integer
	
	Private _Tags As String
	
	Private _PageName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWikiPageIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnWikiPageIdChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnLastEditionDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastEditionDateChanged()
    End Sub
    Partial Private Sub OnLastEditedbyChanging(value As String)
    End Sub
    Partial Private Sub OnLastEditedbyChanged()
    End Sub
    Partial Private Sub OnParentWikiIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnParentWikiIdChanged()
    End Sub
    Partial Private Sub OnTagsChanging(value As String)
    End Sub
    Partial Private Sub OnTagsChanged()
    End Sub
    Partial Private Sub OnPageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPageNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WikiPageId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WikiPageId() As Integer
		Get
			Return Me._WikiPageId
		End Get
		Set
			If ((Me._WikiPageId = value)  _
						= false) Then
				Me.OnWikiPageIdChanging(value)
				Me.SendPropertyChanging
				Me._WikiPageId = value
				Me.SendPropertyChanged("WikiPageId")
				Me.OnWikiPageIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditionDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastEditionDate() As Date
		Get
			Return Me._LastEditionDate
		End Get
		Set
			If ((Me._LastEditionDate = value)  _
						= false) Then
				Me.OnLastEditionDateChanging(value)
				Me.SendPropertyChanging
				Me._LastEditionDate = value
				Me.SendPropertyChanged("LastEditionDate")
				Me.OnLastEditionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditedby", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LastEditedby() As String
		Get
			Return Me._LastEditedby
		End Get
		Set
			If (String.Equals(Me._LastEditedby, value) = false) Then
				Me.OnLastEditedbyChanging(value)
				Me.SendPropertyChanging
				Me._LastEditedby = value
				Me.SendPropertyChanged("LastEditedby")
				Me.OnLastEditedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentWikiId", DbType:="Int NOT NULL")>  _
	Public Property ParentWikiId() As Integer
		Get
			Return Me._ParentWikiId
		End Get
		Set
			If ((Me._ParentWikiId = value)  _
						= false) Then
				Me.OnParentWikiIdChanging(value)
				Me.SendPropertyChanging
				Me._ParentWikiId = value
				Me.SendPropertyChanged("ParentWikiId")
				Me.OnParentWikiIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tags", DbType:="NVarChar(256)")>  _
	Public Property Tags() As String
		Get
			Return Me._Tags
		End Get
		Set
			If (String.Equals(Me._Tags, value) = false) Then
				Me.OnTagsChanging(value)
				Me.SendPropertyChanging
				Me._Tags = value
				Me.SendPropertyChanged("Tags")
				Me.OnTagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property PageName() As String
		Get
			Return Me._PageName
		End Get
		Set
			If (String.Equals(Me._PageName, value) = false) Then
				Me.OnPageNameChanging(value)
				Me.SendPropertyChanging
				Me._PageName = value
				Me.SendPropertyChanged("PageName")
				Me.OnPageNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_Advices")>  _
Partial Public Class mcc_Advice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AdviceID As Integer
	
	Private _AddedDate As Date
	
	Private _AddedBy As String
	
	Private _Title As String
	
	Private _Abstract As String
	
	Private _Approved As Boolean
	
	Private _Listed As Boolean
	
	Private _ViewCount As Integer
	
	Private _Votes As Integer
	
	Private _Body As String
	
	Private _Tags As String
	
	Private _TotalRating As Integer
	
	Private _CommentsEnabled As Boolean
	
	Private _OnlyForMembers As Boolean
	
	Private _Slug As String
	
	Private _VoteUp As System.Nullable(Of Integer)
	
	Private _VoteDown As System.Nullable(Of Integer)
	
	Private _Status As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAdviceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAdviceIDChanged()
    End Sub
    Partial Private Sub OnAddedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnAddedDateChanged()
    End Sub
    Partial Private Sub OnAddedByChanging(value As String)
    End Sub
    Partial Private Sub OnAddedByChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnAbstractChanging(value As String)
    End Sub
    Partial Private Sub OnAbstractChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnListedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnListedChanged()
    End Sub
    Partial Private Sub OnViewCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnViewCountChanged()
    End Sub
    Partial Private Sub OnVotesChanging(value As Integer)
    End Sub
    Partial Private Sub OnVotesChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnTagsChanging(value As String)
    End Sub
    Partial Private Sub OnTagsChanged()
    End Sub
    Partial Private Sub OnTotalRatingChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotalRatingChanged()
    End Sub
    Partial Private Sub OnCommentsEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCommentsEnabledChanged()
    End Sub
    Partial Private Sub OnOnlyForMembersChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOnlyForMembersChanged()
    End Sub
    Partial Private Sub OnSlugChanging(value As String)
    End Sub
    Partial Private Sub OnSlugChanged()
    End Sub
    Partial Private Sub OnVoteUpChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVoteUpChanged()
    End Sub
    Partial Private Sub OnVoteDownChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVoteDownChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdviceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AdviceID() As Integer
		Get
			Return Me._AdviceID
		End Get
		Set
			If ((Me._AdviceID = value)  _
						= false) Then
				Me.OnAdviceIDChanging(value)
				Me.SendPropertyChanging
				Me._AdviceID = value
				Me.SendPropertyChanged("AdviceID")
				Me.OnAdviceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedDate", DbType:="DateTime NOT NULL")>  _
	Public Property AddedDate() As Date
		Get
			Return Me._AddedDate
		End Get
		Set
			If ((Me._AddedDate = value)  _
						= false) Then
				Me.OnAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._AddedDate = value
				Me.SendPropertyChanged("AddedDate")
				Me.OnAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AddedBy", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property AddedBy() As String
		Get
			Return Me._AddedBy
		End Get
		Set
			If (String.Equals(Me._AddedBy, value) = false) Then
				Me.OnAddedByChanging(value)
				Me.SendPropertyChanging
				Me._AddedBy = value
				Me.SendPropertyChanged("AddedBy")
				Me.OnAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Abstract", DbType:="NVarChar(4000) NOT NULL", CanBeNull:=false)>  _
	Public Property Abstract() As String
		Get
			Return Me._Abstract
		End Get
		Set
			If (String.Equals(Me._Abstract, value) = false) Then
				Me.OnAbstractChanging(value)
				Me.SendPropertyChanging
				Me._Abstract = value
				Me.SendPropertyChanged("Abstract")
				Me.OnAbstractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit NOT NULL")>  _
	Public Property Approved() As Boolean
		Get
			Return Me._Approved
		End Get
		Set
			If ((Me._Approved = value)  _
						= false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Listed", DbType:="Bit NOT NULL")>  _
	Public Property Listed() As Boolean
		Get
			Return Me._Listed
		End Get
		Set
			If ((Me._Listed = value)  _
						= false) Then
				Me.OnListedChanging(value)
				Me.SendPropertyChanging
				Me._Listed = value
				Me.SendPropertyChanged("Listed")
				Me.OnListedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewCount", DbType:="Int NOT NULL")>  _
	Public Property ViewCount() As Integer
		Get
			Return Me._ViewCount
		End Get
		Set
			If ((Me._ViewCount = value)  _
						= false) Then
				Me.OnViewCountChanging(value)
				Me.SendPropertyChanging
				Me._ViewCount = value
				Me.SendPropertyChanged("ViewCount")
				Me.OnViewCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Votes", DbType:="Int NOT NULL")>  _
	Public Property Votes() As Integer
		Get
			Return Me._Votes
		End Get
		Set
			If ((Me._Votes = value)  _
						= false) Then
				Me.OnVotesChanging(value)
				Me.SendPropertyChanging
				Me._Votes = value
				Me.SendPropertyChanged("Votes")
				Me.OnVotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(MAX)")>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tags", DbType:="NVarChar(256)")>  _
	Public Property Tags() As String
		Get
			Return Me._Tags
		End Get
		Set
			If (String.Equals(Me._Tags, value) = false) Then
				Me.OnTagsChanging(value)
				Me.SendPropertyChanging
				Me._Tags = value
				Me.SendPropertyChanged("Tags")
				Me.OnTagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalRating", DbType:="Int NOT NULL")>  _
	Public Property TotalRating() As Integer
		Get
			Return Me._TotalRating
		End Get
		Set
			If ((Me._TotalRating = value)  _
						= false) Then
				Me.OnTotalRatingChanging(value)
				Me.SendPropertyChanging
				Me._TotalRating = value
				Me.SendPropertyChanged("TotalRating")
				Me.OnTotalRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentsEnabled", DbType:="Bit NOT NULL")>  _
	Public Property CommentsEnabled() As Boolean
		Get
			Return Me._CommentsEnabled
		End Get
		Set
			If ((Me._CommentsEnabled = value)  _
						= false) Then
				Me.OnCommentsEnabledChanging(value)
				Me.SendPropertyChanging
				Me._CommentsEnabled = value
				Me.SendPropertyChanged("CommentsEnabled")
				Me.OnCommentsEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnlyForMembers", DbType:="Bit NOT NULL")>  _
	Public Property OnlyForMembers() As Boolean
		Get
			Return Me._OnlyForMembers
		End Get
		Set
			If ((Me._OnlyForMembers = value)  _
						= false) Then
				Me.OnOnlyForMembersChanging(value)
				Me.SendPropertyChanging
				Me._OnlyForMembers = value
				Me.SendPropertyChanged("OnlyForMembers")
				Me.OnOnlyForMembersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Slug", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Slug() As String
		Get
			Return Me._Slug
		End Get
		Set
			If (String.Equals(Me._Slug, value) = false) Then
				Me.OnSlugChanging(value)
				Me.SendPropertyChanging
				Me._Slug = value
				Me.SendPropertyChanged("Slug")
				Me.OnSlugChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VoteUp", DbType:="Int")>  _
	Public Property VoteUp() As System.Nullable(Of Integer)
		Get
			Return Me._VoteUp
		End Get
		Set
			If (Me._VoteUp.Equals(value) = false) Then
				Me.OnVoteUpChanging(value)
				Me.SendPropertyChanging
				Me._VoteUp = value
				Me.SendPropertyChanged("VoteUp")
				Me.OnVoteUpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VoteDown", DbType:="Int")>  _
	Public Property VoteDown() As System.Nullable(Of Integer)
		Get
			Return Me._VoteDown
		End Get
		Set
			If (Me._VoteDown.Equals(value) = false) Then
				Me.OnVoteDownChanging(value)
				Me.SendPropertyChanging
				Me._VoteDown = value
				Me.SendPropertyChanged("VoteDown")
				Me.OnVoteDownChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.mcc_QuestionTrackings")>  _
Partial Public Class mcc_QuestionTracking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As String
	
	Private _UserQuestionId As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserQuestionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserQuestionIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserQuestionId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserQuestionId() As Integer
		Get
			Return Me._UserQuestionId
		End Get
		Set
			If ((Me._UserQuestionId = value)  _
						= false) Then
				Me.OnUserQuestionIdChanging(value)
				Me.SendPropertyChanging
				Me._UserQuestionId = value
				Me.SendPropertyChanged("UserQuestionId")
				Me.OnUserQuestionIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class FindArticleResult
	
	Private _ArticleID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticleID", DbType:="Int NOT NULL")>  _
	Public Property ArticleID() As Integer
		Get
			Return Me._ArticleID
		End Get
		Set
			If ((Me._ArticleID = value)  _
						= false) Then
				Me._ArticleID = value
			End If
		End Set
	End Property
End Class

Partial Public Class FindCommentsResult
	
	Private _CommentID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommentID", DbType:="Int NOT NULL")>  _
	Public Property CommentID() As Integer
		Get
			Return Me._CommentID
		End Get
		Set
			If ((Me._CommentID = value)  _
						= false) Then
				Me._CommentID = value
			End If
		End Set
	End Property
End Class

Partial Public Class FindVideoResult
	
	Private _VideoID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VideoID", DbType:="Int NOT NULL")>  _
	Public Property VideoID() As Integer
		Get
			Return Me._VideoID
		End Get
		Set
			If ((Me._VideoID = value)  _
						= false) Then
				Me._VideoID = value
			End If
		End Set
	End Property
End Class
